# Russian translation of the SymPy tutorial.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# Alexey Subach <alexey.subach@gmail.com>, 2011
#
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 15:09\n"
"PO-Revision-Date: 2012-03-19 21:40+0400\n"
"Last-Translator: Alexey Gudchenko <proga@goodok.ru>\n"
"Language-Team: \n"
"Language: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial.en.rst:5
msgid "Tutorial"
msgstr "Краткое руководство"

#: tutorial.en.rst:10
msgid "Introduction"
msgstr "Введение"

#: tutorial.en.rst:12
msgid ""
"SymPy is a Python library for symbolic mathematics. It aims to become a full-"
"featured computer algebra system (CAS) while keeping the code as simple as "
"possible in order to be comprehensible and easily extensible.  SymPy is "
"written entirely in Python and does not require any external libraries."
msgstr ""
"SymPy представляет собой открытую библиотеку символьных вычислений на языке "
"Python. Цель SymPy - стать полнофункциональной системой компьютерной алгебры "
"(CAS), при этом сохраняя код максимально понятным и легко расширяемым. SymPy "
"полностью написан на Python и не требует сторонних библиотек."

#: tutorial.en.rst:17
msgid ""
"This tutorial gives an overview and introduction to SymPy. Read this to have "
"an idea what SymPy can do for you (and how) and if you want to know more, "
"read the :ref:`SymPy User's Guide <guide>`, the :ref:`SymPy Modules "
"Reference <module-docs>`, or the `sources <https://github.com/sympy/sympy/"
">`_ directly."
msgstr ""
"Данное руководство представляет из себя введение в SymPy. В нем вы узнаете "
"об основных возможностях SymPy и каким образом использовать эту программу. "
"Если же вы желаете прочитать более подробное руководство, то обратитесь к "
"`Руководству пользователя SymPy <../guide.html>`_, `Описанию модулей SymPy "
"<../modules/index.html>`_, Можно также обратиться и к `исходному коду "
"<https://github.com/sympy/sympy/>`_ библиотеки."

#: tutorial.en.rst:24
msgid "First Steps with SymPy"
msgstr "Первые шаги с SymPy"

#: tutorial.en.rst:26
msgid ""
"The easiest way to download it is to go to http://code.google.com/p/sympy/ "
"and download the latest tarball from the Featured Downloads:"
msgstr ""
"Скачать SymPy проще всего с http://code.google.com/p/sympy/. В разделе "
"Featured, Downloads нужно найти и загрузить последнюю версию дистрибутива:"

#: tutorial.en.rst:32
msgid "Unpack it:"
msgstr ""
"Для Windows-систем, нужно скачать и запустить установочный .exe файл. В "
"POSIX-совместимых системах нужно скачать .tar.gz файл и распаковать его:"

#: tutorial.en.rst:38
msgid "and try it from a Python interpreter:"
msgstr "и запустить из интерпретатора Python:"

#: tutorial.en.rst:52
msgid ""
"You can use SymPy as shown above and this is indeed the recommended way if "
"you use it in your program. You can also install it using ``./setup.py "
"install`` as any other Python module, or just install a package in your "
"favourite Linux distribution, e.g.:"
msgstr ""
"Если вы собираетесь использовать SymPy в вашей программе как модуль, "
"рекомендуется обращаться к нему таким же способом, как показано выше. "
"Установить модуль в систему можно или из скаченных исходников, используя "
"команду ./setup.py install. Или, если вы работаете в Linux, можно установить "
"пакет ``python-sympy`` с помощью системы установки программ:"

#: tutorial.en.rst:78
msgid ""
"For other means how to install SymPy, consult the wiki page `Download and "
"Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_."
msgstr ""
"Другие способы установки SymPy описаны в разделе `Download and "
"Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_ "
"нашего Вики."
#: tutorial.en.rst:83
msgid "isympy Console"
msgstr "Консоль isympy"

#: tutorial.en.rst:85
msgid ""
"For experimenting with new features, or when figuring out how to do things, "
"you can use our special wrapper around IPython called ``isympy`` (located in "
"``bin/isympy`` if you are running from the source directory) which is just a "
"standard Python shell that has already imported the relevant SymPy modules "
"and defined the symbols x, y, z and some other things:"
msgstr ""
"SymPy можно использовать не только как модуль, но и как отдельную программу "
"``isympy``, которая расположена в папке ``bin`` относительно директории с "
"исходным кодом. Программа удобна для экспериментов с новыми функциями или "
"для обучения SymPy. Она использует стандартный терминал IPython, но с уже "
"включенными в нее важными модулями SymPy и определенными переменными x, y, z:"

#: tutorial.en.rst:115
msgid ""
"Commands entered by you are bold. Thus what we did in 3 lines in a regular "
"Python interpreter can be done in 1 line in isympy."
msgstr ""
"Команды введенные вами, обозначены жирным шрифтом. То, что мы делали тремя "
"строчками в стандартном терминале Python, мы можем сделать одной строчкой в "
"isympy. Кроме того программа поддерживает различные способы отображения "
"результатов, в том числе графические."

#: tutorial.en.rst:120
msgid "Using SymPy as a calculator"
msgstr "Использование SymPy в качестве калькулятора"

#: tutorial.en.rst:122
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr ""
"SymPy поддерживает три типа численных данных: Float, Rational и Integer."

#: tutorial.en.rst:124
msgid ""
"The Rational class represents a rational number as a pair of two Integers: "
"the numerator and the denominator. So Rational(1, 2) represents 1/2, Rational"
"(5, 2) represents 5/2, and so on."
msgstr ""
"Rational представляет собой обыкновенную дробь, которая задается с помощью "
"двух целых чисел: числителя и знаменателя. Например, Rational(1, 2) "
"представляет дробь 1/2, Rational(5, 2) представляет дробь 5/2, и так далее."

#: tutorial.en.rst:143
msgid ""
"Proceed with caution while working with Python int's and floating point "
"numbers, especially in division, since you may create a Python number, not a "
"SymPy number. A ratio of two Python ints may create a float -- the \"true "
"division\" standard of Python 3 and the default behavior of ``isympy`` which "
"imports division from __future__:"
msgstr ""
"Важная особенность Python-интерпретатора, о которой нужно сказать отдельно, "
"связана с делением целых чисел При делении двух питоновских чисел типа int с "
"помощью оператора \"/\" в старых версиях Python в результате получается "
"число питоновского типа int. В Python 3 этот стандарт изменен на \"true "
"division\", и в результате получается питоновский тип float.И этот же "
"стандарт \"true division\" по умолчанию включен и в isympy:"

#: tutorial.en.rst:155
msgid ""
"But in earlier Python versions where division has not been imported, a "
"truncated int will result:"
msgstr ""
"В более ранних версиях Python этого не получится, и результатом будет "
"целочисленное деление:"

#: tutorial.en.rst:163
msgid ""
"In both cases, however, you are not dealing with a SymPy Number because "
"Python created its own number. Most of the time you will probably be working "
"with Rational numbers, so make sure to use Rational to get the SymPy result. "
"One might find it convenient to equate ``R`` and Rational:"
msgstr ""
"Обратите внимание, что и в том и в другом случае вы имеете дело не с "
"объектом Number из библиотеки SymPy, который представляет число в SymPy, а с "
"питоновскими числами, которые создаются самим интерпретатором Python. Скорее "
"всего, вам нужно будете работать с дробными числами из библиотеки SymPy, "
"поэтому для того чтобы получать результат в виде объектов SymPy убедитесь, "
"что вы используете класс Rational. Кому-то может показаться удобным "
"обозначать Rational как ``R``:"

#: tutorial.en.rst:177
msgid ""
"We also have some special constants, like e and pi, that are treated as "
"symbols (1 + pi won't evaluate to something numeric, rather it will remain "
"as 1 + pi), and have arbitrary precision:"
msgstr ""
"В модуле Sympy имеются особые константы, такие как e и pi, которые ведут "
"себя как переменные (то есть выражение 1 + pi не преобразуется сразу в число, "
"а так и останется 1 + pi):"

#: tutorial.en.rst:193
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""
"как вы видите, функция evalf переводит исходное выражение в число с "
"плавающей точкой. Вычисления можно проводить с большей точностью. Для этого "
"нужно передать в качестве аргумента этой функции требуемое число десятичных "
"знаков."

#: tutorial.en.rst:195
msgid "The symbol ``oo`` is used for a class defining mathematical infinity:"
msgstr "Для работы с математической бесконечностью используется символ ``oo``:"

#: tutorial.en.rst:206
msgid "Symbols"
msgstr "Переменные"

#: tutorial.en.rst:208
msgid ""
"In contrast to other Computer Algebra Systems, in SymPy you have to declare "
"symbolic variables explicitly:"
msgstr ""
"В отличие от многих других систем компьютерной алгебры, вам нужно явно "
"декларировать символьные переменные:"

#: tutorial.en.rst:217
msgid ""
"On the left is the normal Python variable which has been assigned to the "
"SymPy Symbol class. Predefined symbols (including those for symbols with "
"Greek names) are available for import from abc:"
msgstr ""
"В левой части этого выражения находится переменная Python, которая "
"питоновским присваиванием соотносится с объектом класса Symbol из SymPy."

#: tutorial.en.rst:223
msgid ""
"Symbols can also be created with the ``symbols`` or ``var`` functions, the "
"latter automatically adding the created symbols to the namespace, and both "
"accepting a range notation:"
msgstr ""
"Символьные переменные могут также задаваться и с помощью функций ``symbols`` "
"или ``var``. Они допускают указание диапазона. Их отличие состоит в том, что "
"``var`` добавляет созданные переменные в текущее пространство имен:"

#: tutorial.en.rst:235
msgid ""
"Instances of the Symbol class \"play well together\" and are the building "
"blocks of expresions:"
msgstr ""
"Экземпляры класса Symbol взаимодействуют друг с другом. Таким образом, с "
"помощью них конструируются алгебраические выражения:"

#: tutorial.en.rst:249
msgid ""
"They can be substituted with other numbers, symbols or expressions using "
"``subs(old, new)``:"
msgstr ""
"Переменные могут быть заменены на другие переменные, числа или выражения с "
"помощью функции подстановки ``subs(old, new)``:"

#: tutorial.en.rst:262
msgid "For the remainder of the tutorial, we assume that we have run:"
msgstr ""
"Теперь, с этого момента, для всех написанных ниже примеров мы будем "
"предполагать, что запустили следующую команду по настройке системы "
"отображения результатов:"

#: tutorial.en.rst:269
msgid ""
"This will make things look better when printed. See the :ref:`printing-"
"tutorial` section below. If you have a unicode font installed, you can pass "
"use_unicode=True for a slightly nicer output."
msgstr ""
"Она придаст более качественное отображение выражений. Подробнее по системе "
"отображения и печати написано в разделе :ref:`printing-tutorial`. Если же у "
"вас установлен шрифт с юникодом, вы можете использовать опцию "
"use_unicode=True для еще более красивого вывода."

#: tutorial.en.rst:274
msgid "Algebra"
msgstr "Алгебра"

#: tutorial.en.rst:276
msgid "For partial fraction decomposition, use ``apart(expr, x)``:"
msgstr ""
"Чтобы разложить выражение на простейшие дроби используется функция ``apart"
"(expr, x)``:"

#: tutorial.en.rst:303
msgid "To combine things back together, use ``together(expr, x)``:"
msgstr ""
"Чтобы снова привести дробь к общему знаменателю используется функция "
"``together(expr, x)``:"

#: tutorial.en.rst:327
msgid "Calculus"
msgstr "Вычисления"

#: tutorial.en.rst:332
msgid "Limits"
msgstr "Пределы"

#: tutorial.en.rst:334
msgid ""
"Limits are easy to use in SymPy, they follow the syntax ``limit(function, "
"variable, point)``, so to compute the limit of f(x) as x -> 0, you would "
"issue ``limit(f, x, 0)``:"
msgstr ""
"Пределы считаются в SymPy очень легко. Чтобы вычислить предел функции, "
"используйте функцию ``limit(function, variable, point)``. Например, чтобы "
"вычислить предел f(x) при x -> 0, вам нужно ввести ``limit(f, x, 0)``:"

#: tutorial.en.rst:345
msgid "you can also calculate the limit at infinity:"
msgstr "также вы можете вычислять пределы при x, стремящемся к бесконечности:"

#: tutorial.en.rst:358
msgid ""
"for some non-trivial examples on limits, you can read the test file "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"
msgstr ""
"Для более сложных примеров вычисления пределов, вы можете обратится к файлу "
"с тестами `test_demidovich.py <https://github.com/sympy/sympy/blob/master/"
"sympy/series/tests/test_demidovich.py>`_ "

#: tutorial.en.rst:365
msgid "Differentiation"
msgstr "Дифференцирование"

#: tutorial.en.rst:367
msgid ""
"You can differentiate any SymPy expression using ``diff(func, var)``. "
"Examples:"
msgstr ""
"Продифференцировать любое выражение SymPy, можно используя ``diff(func, var)"
"``. Примеры:"

#: tutorial.en.rst:382
msgid "You can check, that it is correct by:"
msgstr ""
"Можно, кстати, через пределы проверить правильность вычислений производной:"

#: tutorial.en.rst:392
msgid ""
"Higher derivatives can be calculated using the ``diff(func, var, n)`` method:"
msgstr ""
"Производные более высших порядков можно вычислить, используя дополнительный "
"параметр этой же функции ``diff(func, var, n)``:"

#: tutorial.en.rst:411
msgid "Series expansion"
msgstr "Разложение в ряд"

#: tutorial.en.rst:413
msgid "Use ``.series(var, point, order)``:"
msgstr "Для разложения в ряд используйте метод ``.series(var, point, order)``:"

#: tutorial.en.rst:430
msgid "Another simple example:"
msgstr "Еще один простой пример:"

#: tutorial.en.rst:456
msgid "Summation"
msgstr ""

#: tutorial.en.rst:458
msgid ""
"Compute the summation of f with respect to the given summation variable over "
"the given limits."
msgstr ""

#: tutorial.en.rst:460
msgid ""
"summation(f, (i, a, b)) computes the sum of f with respect to i from a to b, "
"i.e.,"
msgstr ""

#: tutorial.en.rst:473
msgid ""
"If it cannot compute the sum, it prints the corresponding summation formula. "
"Repeated sums can be computed by introducing additional limits:"
msgstr ""

#: tutorial.en.rst:509
msgid "Integration"
msgstr "Интегрирование"

#: tutorial.en.rst:511
msgid ""
"SymPy has support for indefinite and definite integration of transcendental "
"elementary and special functions via ``integrate()`` facility, which uses "
"powerful extended Risch-Norman algorithm and some heuristics and pattern "
"matching:"
msgstr ""
"SymPy поддерживает вычисление определенных и неопределенных интегралов с "
"помощью функции ``integrate()``. Она использует расширенный алгоритм Риша-"
"Нормана и некоторые шаблоны и эвристики. Можно вычислять интегралы "
"трансцендентных, простых и специальных функций:"

#: tutorial.en.rst:521
msgid "You can integrate elementary functions:"
msgstr "Вы можете интегрировать простейшие функции:"

#: tutorial.en.rst:536
msgid "Also special functions are handled easily:"
msgstr "Примеры интегрирования некоторых специальных функций:"

#: tutorial.en.rst:546
msgid "It is possible to compute definite integrals:"
msgstr "Возможно также вычислить определенный интеграл:"

#: tutorial.en.rst:557
msgid "Also, improper integrals are supported as well:"
msgstr "Поддерживаются и несобственные интегралы:"

#: tutorial.en.rst:571
msgid "Complex numbers"
msgstr "Комплексные числа"

#: tutorial.en.rst:573
msgid ""
"Besides the imaginary unit, I, which is imaginary, symbols can be created "
"with attributes (e.g. real, positive, complex, etc...) and this will affect "
"how they behave:"
msgstr ""
"Помимо мнимой единицы I, которое является мнимым числом, символы тоже могут "
"иметь специальные атрибуты (real, positive, complex и т.д), которые "
"определяют поведение этих символов при вычислении символьных выражений:"

#: tutorial.en.rst:592
msgid "Functions"
msgstr "Функции"

#: tutorial.en.rst:594
msgid "**trigonometric**"
msgstr "**тригонометрические**"

#: tutorial.en.rst:645
msgid "**spherical harmonics**"
msgstr "**сферические**"

#: tutorial.en.rst:673
msgid "**factorials and gamma function**"
msgstr "**факториалы и гамма-функции**"

#: tutorial.en.rst:693
msgid "**zeta function**"
msgstr "**дзета-функции**"

#: tutorial.en.rst:720
msgid "**polynomials**"
msgstr "**многочлены**"

#: tutorial.en.rst:761
msgid "Differential Equations"
msgstr "Дифференциальные уравнения"

#: tutorial.en.rst:763 tutorial.en.rst:785
msgid "In ``isympy``:"
msgstr "В ``isympy``:"

#: tutorial.en.rst:783
msgid "Algebraic equations"
msgstr "Алгебраические уравнения"

#: tutorial.en.rst:800
msgid "Linear Algebra"
msgstr "Линейная алгебра"

#: tutorial.en.rst:805
msgid "Matrices"
msgstr "Матрицы"

#: tutorial.en.rst:807
msgid "Matrices are created as instances from the Matrix class:"
msgstr "Матрицы задаются с помощью конструктора Matrix:"

#: tutorial.en.rst:817
msgid "They can also contain symbols:"
msgstr "В матрицах вы также можете использовать символьные переменные:"

#: tutorial.en.rst:834
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""
"Для того, чтобы узнать о матрицах подробнее, прочитайте, пожалуйста, "
"Руководство по Линейной Алгебре."

#: tutorial.en.rst:839
msgid "Pattern matching"
msgstr "Сопоставление с образцом"

#: tutorial.en.rst:841
msgid ""
"Use the ``.match()`` method, along with the ``Wild`` class, to perform "
"pattern matching on expressions. The method will return a dictionary with "
"the required substitutions, as follows:"
msgstr ""
"Чтобы сопоставить выражения с образцами, используйте функцию ``.match()`` "
"вместе со вспомогательным классом ``Wild``. Эта функция вернет словарь с "
"необходимыми заменами, например:"

#: tutorial.en.rst:857
msgid "If the match is unsuccessful, it returns ``None``:"
msgstr "Если же сопоставление не удалось, функция вернет``None``:"

#: tutorial.en.rst:864
msgid ""
"One can also use the exclude parameter of the ``Wild`` class to ensure that "
"certain things do not show up in the result:"
msgstr ""
"Также можно использовать параметр exclude для исключения некоторых значений "
"из результата:"

#: tutorial.en.rst:880
msgid "Printing"
msgstr "Печать"

#: tutorial.en.rst:882
msgid "There are many ways to print expressions."
msgstr "Реализовано несколько способов вывода выражений на экран."

#: tutorial.en.rst:884
msgid "**Standard**"
msgstr "**Стандартный**"

#: tutorial.en.rst:886
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr ""
"Стандартный способ представлен функцией ``str(expression)``, которая "
"работает следующим образом:"

#: tutorial.en.rst:897
msgid "**Pretty printing**"
msgstr "**Красивая печать**"

#: tutorial.en.rst:899
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr ""
"Этот способ печати выражений основан на ascii-графике и реализован через "
"функцию ``pprint``:"

#: tutorial.en.rst:918
msgid ""
"If you have a unicode font installed, the ``pprint`` function will use it by "
"default. You can override this using the ``use_unicode`` option.:"
msgstr ""
"Если у вас установлен шрифт с юникодом, он будет использовать Pretty-print с "
"юникодом по умолчанию. Эту настройку можно отключить, используя "
"``use_unicode``:"

#: tutorial.en.rst:927
msgid ""
"See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""
"Для изучения подробных примеров работы Pretty-print с юникодом вы можете "
"обратится к статье `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ из нашего Вики."

#: tutorial.en.rst:931
msgid ""
"Tip: To make pretty printing the default in the Python interpreter, use:"
msgstr ""
"Совет: Чтобы активировать Pretty-print по умолчанию в интерпретаторе Python, "
"используйте:"

#: tutorial.en.rst:956
msgid "**Python printing**"
msgstr "**Печать объектов Python**"

#: tutorial.en.rst:974
msgid "**LaTeX printing**"
msgstr "**Печать в формате LaTeX**"

#: tutorial.en.rst:993
msgid "**MathML**"
msgstr "**MathML**"

#: tutorial.en.rst:1005
msgid "**Pyglet**"
msgstr "**Pyglet**"

#: tutorial.en.rst:1013
msgid ""
"If pyglet is installed, a pyglet window will open containing the LaTeX "
"rendered expression:"
msgstr "Появится окно pyglet с отрисованным выражением LaTeX:"

#: tutorial.en.rst:1019
msgid "Notes"
msgstr "Примечания"

#: tutorial.en.rst:1021
msgid ""
"``isympy`` calls ``pprint`` automatically, so that's why you see pretty "
"printing by default."
msgstr ""
"``isympy`` вызывает ``pprint`` автоматически, по этой причине Pretty-print "
"будет включен в ``isympy`` по умолчанию."

#: tutorial.en.rst:1024
msgid ""
"Note that there is also a printing module available, ``sympy.printing``.  "
"Other printing methods available through this module are:"
msgstr ""
"Также доступен модуль печати - ``sympy.printing``. Через этот модуль "
"доступны следующий функции печати:"

#: tutorial.en.rst:1027
msgid ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, "
"respectively, a pretty representation of ``expr``. This is the same as the "
"second level of representation described above."
msgstr ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Возвращает или "
"выводит на экран, соответственно, \"Красивое\" представление выражения "
"``expr``. "

#: tutorial.en.rst:1029
msgid ""
"``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a "
"`LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""
"``latex(expr)``, ``print_latex(expr)``: Возвращает или выводит на экран, "
"соответственно, `LaTeX <http://www.latex-project.org/>`_ -представление "
"``expr``"

#: tutorial.en.rst:1031
msgid ""
"``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a "
"`MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""
"``mathml(expr)``, ``print_mathml(expr)``: Возвращает или выводит на экран, "
"соответственно, `MathML <http://www.w3.org/Math/>`_ -представление ``expr``."

#: tutorial.en.rst:1033
msgid ""
"``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview "
"<http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""
"``print_gtk(expr)``: Вывод ``expr`` в `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, виджет GTK, который отображает код MathML. Необходимо "
"наличие пакета `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ ."

#: tutorial.en.rst:1036
msgid "Further documentation"
msgstr "Другие справочники"

#: tutorial.en.rst:1038
msgid ""
"Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's "
"Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""
"Чтобы узнать о SymPy подробнее, обратитесь `Руководство пользователя SymPy "
"<../guide.html>`_ и `Описание модулей SymPy <../modules/index.html>`_."

#: tutorial.en.rst:1042
msgid ""
"Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/"
">`_, that contains a lot of useful examples, tutorials, cookbooks that we "
"and our users contributed, and feel free to edit it."
msgstr ""
"Также можно обратится на `wiki.sympy.org <http://wiki.sympy.org/>`_ - сайт, "
"который содержит множество полезных примеров, руководств и советов. Они "
"созданны нами и нашим сообществом. Мы будем рады, если и вы внесете в него "
"свой весомый вклад."

#: tutorial.en.rst:1049
msgid "Translations"
msgstr "Переводы"

#: tutorial.en.rst:1051
msgid "This tutorial is also available in other languages:"
msgstr "Этот текст доступен на других языках:"
