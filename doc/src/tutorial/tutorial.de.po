# German translation of the SymPy tutorial.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 15:09\n"
"PO-Revision-Date: 2012-12-10 15:32\n"
"Last-Translator: Julien Rioux <julien.rioux@gmail.com>\n"
"Language-Team: \n"
"Language: German\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial.en.rst:5
msgid "Tutorial"
msgstr "Tutorial"

#: tutorial.en.rst:10
msgid "Introduction"
msgstr "Einführung"

#: tutorial.en.rst:12
msgid ""
"SymPy is a Python library for symbolic mathematics. It aims to become a full-"
"featured computer algebra system (CAS) while keeping the code as simple as "
"possible in order to be comprehensible and easily extensible.  SymPy is "
"written entirely in Python and does not require any external libraries."
msgstr ""
"SymPy ist eine Python-Bibliothek für symbolische Mathematik. SymPy soll ein "
"vollständiges Computer-Algebra-System (CAS) bereitstellen und dabei den "
"Programmcode so einfach halten, dass er nachvollziehbar und einfach "
"erweiterbar bleibt. SymPy ist vollständig in Python geschrieben und benötigt "
"keine weiteren Bibliotheken."

#: tutorial.en.rst:17
msgid ""
"This tutorial gives an overview and introduction to SymPy. Read this to have "
"an idea what SymPy can do for you (and how) and if you want to know more, "
"read the :ref:`SymPy User's Guide <guide>`, the :ref:`SymPy Modules "
"Reference <module-docs>`, or the `sources <https://github.com/sympy/sympy/"
">`_ directly."
msgstr ""
"Dieses Tutorial schafft einen Überblick und gibt eine Einführung in SymPy. "
"Wenn du wissen möchtest, was SymPy tun kann (und wie), lies diese Seite, und "
"wenn du mehr erfahren möchtest, lies den `SymPy User's Guide <../guide."
"html>`_, die `SymPy Modules Reference <../modules/index.html>`_, oder den "
"`Quellcode <https://github.com/sympy/sympy/>`_ selbst."

#: tutorial.en.rst:24
msgid "First Steps with SymPy"
msgstr "Erste Schritte mit SymPy"

#: tutorial.en.rst:26
msgid ""
"The easiest way to download it is to go to http://code.google.com/p/sympy/ "
"and download the latest tarball from the Featured Downloads:"
msgstr ""
"Am einfachsten kannst du SymPy mit der aktuellsten .tar-Datei aus den "
"\"Featured Downloads\" von http://code.google.com/p/sympy/ installieren:"

#: tutorial.en.rst:32
msgid "Unpack it:"
msgstr "Dann musst du die Datei auspacken:"

#: tutorial.en.rst:38
msgid "and try it from a Python interpreter:"
msgstr "und kannst sie mit einem Python-Interpreter ausprobieren."

#: tutorial.en.rst:52
msgid ""
"You can use SymPy as shown above and this is indeed the recommended way if "
"you use it in your program. You can also install it using ``./setup.py "
"install`` as any other Python module, or just install a package in your "
"favourite Linux distribution, e.g.:"
msgstr ""
"SymPy kann wie im Beispiel gezeigt benutzt werden, und dies ist auch der "
"übliche Weg, es von einem anderen Programm aus zu verwenden. Du kannst es "
"ebenfalls wie jedes andere Modul mithilfe von ``./setup.py install`` "
"installieren. Auch ist es natürlich möglich, einfach ein Paket deiner Linux-"
"Distribution zu verwenden, zum Beispiel:"

#: tutorial.en.rst:78
msgid ""
"For other means how to install SymPy, consult the wiki page `Download and "
"Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_."
msgstr ""
"Weitere Installationsmöglichkeiten findest du unter `Download and "
"Installation (auf Englisch) <https://github.com/sympy/sympy/wiki/Download-Installation>`_ "
"auf der SymPy-Wiki."

#: tutorial.en.rst:83
msgid "isympy Console"
msgstr "isympy-Konsole"

#: tutorial.en.rst:85
msgid ""
"For experimenting with new features, or when figuring out how to do things, "
"you can use our special wrapper around IPython called ``isympy`` (located in "
"``bin/isympy`` if you are running from the source directory) which is just a "
"standard Python shell that has already imported the relevant SymPy modules "
"and defined the symbols x, y, z and some other things:"
msgstr ""
"Für Experimente mit neuen Funktionen und zum Ausprobieren kann die um "
"IPython aufgebaute Umgebung namens ``isympy`` (im Quellverzeichnis unter "
"``bin/isympy``) benutzt werden. Es handelt sich hierbei nur um eine Standard-"
"Python-Konsole, die allerdings bereits die wichtigen sympy-Module importiert "
"hat und unter anderem die Symbole x, y und z bereits definiert hat:"

#: tutorial.en.rst:115
msgid ""
"Commands entered by you are bold. Thus what we did in 3 lines in a regular "
"Python interpreter can be done in 1 line in isympy."
msgstr ""
"Benutzereingaben sind fett dargestellt. Was in einem normalen Python-"
"Interpreter drei Zeilen gebraucht hätte, kann mit isympy in nur einer Zeile "
"ausgedrückt werden."

#: tutorial.en.rst:120
msgid "Using SymPy as a calculator"
msgstr "Mit SymPy rechnen"

#: tutorial.en.rst:122
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr "SymPy hat drei eingebaute Zahlentypen: Float, Rational und Integer."

#: tutorial.en.rst:124
msgid ""
"The Rational class represents a rational number as a pair of two Integers: "
"the numerator and the denominator. So Rational(1, 2) represents 1/2, Rational"
"(5, 2) represents 5/2, and so on."
msgstr ""
"Die Klasse Rational stellt eine rationale Zahl als Paar von zwei Ganzzahlen "
"dar: dem Zähler und dem Nenner. Rational(1, 2) repräsentiert also 1/2, "
"Rational(5, 2) repräsentiert 5/2 und so weiter."

#: tutorial.en.rst:143
msgid ""
"Proceed with caution while working with Python int's and floating point "
"numbers, especially in division, since you may create a Python number, not a "
"SymPy number. A ratio of two Python ints may create a float -- the \"true "
"division\" standard of Python 3 and the default behavior of ``isympy`` which "
"imports division from __future__:"
msgstr ""
"Beim Arbeiten mit Pythons Ganzzahlen und Fließkommazahlen ist Vorsicht "
"geboten, besonders bei Division, da eine Python-Zahl statt einer SymPy-Zahl "
"das Ergebnis sein kann. Eine Division von zwei Python-Ganzzahlen hat eine "
"Fließkommazahl zum Ergebnis -- die \"echte Divison\" von Python 3 und das "
"Standardverhalten von ``isympy``, welches division aus __future__ importiert:"

#: tutorial.en.rst:155
msgid ""
"But in earlier Python versions where division has not been imported, a "
"truncated int will result:"
msgstr ""
"In älteren Python-Versionen ohne den Import von division ist das Ergebnis "
"hingegen eine abgerundete Ganzzahl:"

#: tutorial.en.rst:163
msgid ""
"In both cases, however, you are not dealing with a SymPy Number because "
"Python created its own number. Most of the time you will probably be working "
"with Rational numbers, so make sure to use Rational to get the SymPy result. "
"One might find it convenient to equate ``R`` and Rational:"
msgstr ""
"In beiden Fällen handelt es sich jedoch nicht um eine SymPy-Zahl, weil "
"Python seine eigenen Zahl zurückgegeben hat. Meistens wirst du aber mit "
"Zahlen des Typs Rational arbeiten wollen, also achte darauf, auch solche zu "
"erhalten. Oft wird zur besseren Lesbarkeit ``R`` mit Rational gleichgesetzt:"

#: tutorial.en.rst:177
msgid ""
"We also have some special constants, like e and pi, that are treated as "
"symbols (1 + pi won't evaluate to something numeric, rather it will remain "
"as 1 + pi), and have arbitrary precision:"
msgstr ""
"Es gibt auch einige spezielle Konstanten wie e oder pi, die als Symbole "
"behandelt werden (1 + pi wird nicht als Zahl ausgerechnet, sondern bleibt "
"1 + pi) und in beliebiger Präzision verfügbar sind:"

#: tutorial.en.rst:193
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr "Wie man sieht, berechnet evalf aus dem Ausdruck eine Fließkommazahl."

#: tutorial.en.rst:195
msgid "The symbol ``oo`` is used for a class defining mathematical infinity:"
msgstr ""
"Das Symnol ``oo`` wird für eine Klasse benutzt, die mathematische "
"Unendlichkeit darstellt:"

#: tutorial.en.rst:206
msgid "Symbols"
msgstr "Symbole"

#: tutorial.en.rst:208
msgid ""
"In contrast to other Computer Algebra Systems, in SymPy you have to declare "
"symbolic variables explicitly:"
msgstr ""
"Im Gegensatz zu anderen Computer-Algebra-Systemen müssen in SymPy "
"symbolische Variablen ausdrücklich deklariert werden:"

#: tutorial.en.rst:217
msgid ""
"On the left is the normal Python variable which has been assigned to the "
"SymPy Symbol class. Predefined symbols (including those for symbols with "
"Greek names) are available for import from abc:"
msgstr ""
"Links steht eine normale Python-Variable, der ein SymPy-Symbol-Objekt "
"zugewiesen wird. Vordefiniert Symbole (inklusiv Symbole mit griechischen "
"Namen) sind von Import von abc verfügbar:"

#: tutorial.en.rst:223
msgid ""
"Symbols can also be created with the ``symbols`` or ``var`` functions, the "
"latter automatically adding the created symbols to the namespace, and both "
"accepting a range notation:"
msgstr ""
"Symbole können auch mit den ``symbols`` oder ``var`` Funktionen erstellt "
"werden. Die letztere fügt automatisch die Symbole in den Namespace ein, und "
"beide Funktionen akzeptieren eine Reihennotation:"

#: tutorial.en.rst:235
msgid ""
"Instances of the Symbol class \"play well together\" and are the building "
"blocks of expresions:"
msgstr "Aus Symbol-Objekten kann man bequem Ausdrücke zusammensetzen:"

#: tutorial.en.rst:249
msgid ""
"They can be substituted with other numbers, symbols or expressions using "
"``subs(old, new)``:"
msgstr ""
"Sie können mit ``subs(old, new)`` durch Zahlen, andere Symbole oder "
"Ausdrücke ersetzt werden:"

#: tutorial.en.rst:262
msgid "For the remainder of the tutorial, we assume that we have run:"
msgstr ""
"Für den Rest des Tutorials gehen wir davon aus, dass folgende Zeile "
"ausgeführt wurde:"

#: tutorial.en.rst:269
msgid ""
"This will make things look better when printed. See the :ref:`printing-"
"tutorial` section below. If you have a unicode font installed, you can pass "
"use_unicode=True for a slightly nicer output."
msgstr ""
"Dies sorgt dafür, dass Ausdrücke bei der Ausgabe besser aussehen (siehe :ref:"
"`printing-tutorial` weiter unten). Wenn eine Unicode-Schrift installiert "
"ist, erreichst du mit use_unicode=True eine noch hübschere Ausgabe."

#: tutorial.en.rst:274
msgid "Algebra"
msgstr "Algebra"

#: tutorial.en.rst:276
msgid "For partial fraction decomposition, use ``apart(expr, x)``:"
msgstr "Für die Partialbruchzerlegung kannst du ``apart(expr, x)`` benutzen:"

#: tutorial.en.rst:303
msgid "To combine things back together, use ``together(expr, x)``:"
msgstr "Zum Kombinieren gibt es die Funktion ``together(expr, x)``:"

#: tutorial.en.rst:327
msgid "Calculus"
msgstr "Infinitesimalrechnung"

#: tutorial.en.rst:332
msgid "Limits"
msgstr "Limes"

#: tutorial.en.rst:334
msgid ""
"Limits are easy to use in SymPy, they follow the syntax ``limit(function, "
"variable, point)``, so to compute the limit of f(x) as x -> 0, you would "
"issue ``limit(f, x, 0)``:"
msgstr ""
"Grenzwerte sind in SymPy einfach zu benutzen, sie folgen der Syntax ``limit"
"(function, variable, point)``, um also den Grenzwert von f(x) bei x -> 0 zu "
"berechnen, kann ``limit(f, x, 0)`` benutzt werden:"

#: tutorial.en.rst:345
msgid "you can also calculate the limit at infinity:"
msgstr "Analog kann der Limes für x gegen unendlich berechnet werden:"

#: tutorial.en.rst:358
msgid ""
"for some non-trivial examples on limits, you can read the test file "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"
msgstr ""
"Einige nicht-triviale Beispiele zu Grenzwerten finden sich in der Datei "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"

#: tutorial.en.rst:365
msgid "Differentiation"
msgstr "Differentialrechnung"

#: tutorial.en.rst:367
msgid ""
"You can differentiate any SymPy expression using ``diff(func, var)``. "
"Examples:"
msgstr ""
"Mithilfe von ``diff(func, var)`` kann jeder SymPy-Ausdruck differenziert "
"werden. Beispiele:"

#: tutorial.en.rst:382
msgid "You can check, that it is correct by:"
msgstr "Folgendermaßen kann überprüft werden, ob dies korrekt ist:"

#: tutorial.en.rst:392
msgid ""
"Higher derivatives can be calculated using the ``diff(func, var, n)`` method:"
msgstr ""
"Höhere Ableitungen können mithilfe von ``diff(func, var, n)`` berechnet "
"werden:"

#: tutorial.en.rst:411
msgid "Series expansion"
msgstr "Reihenentwicklung"

#: tutorial.en.rst:413
msgid "Use ``.series(var, point, order)``:"
msgstr "Benutze ``.series(var, point, order)``:"

#: tutorial.en.rst:430
msgid "Another simple example:"
msgstr "Ein weiteres einfaches Beispiel:"

#: tutorial.en.rst:456
msgid "Summation"
msgstr ""

#: tutorial.en.rst:458
msgid ""
"Compute the summation of f with respect to the given summation variable over "
"the given limits."
msgstr ""

#: tutorial.en.rst:460
msgid ""
"summation(f, (i, a, b)) computes the sum of f with respect to i from a to b, "
"i.e.,"
msgstr ""

#: tutorial.en.rst:473
msgid ""
"If it cannot compute the sum, it prints the corresponding summation formula. "
"Repeated sums can be computed by introducing additional limits:"
msgstr ""

#: tutorial.en.rst:509
msgid "Integration"
msgstr "Integralrechnung"

#: tutorial.en.rst:511
msgid ""
"SymPy has support for indefinite and definite integration of transcendental "
"elementary and special functions via ``integrate()`` facility, which uses "
"powerful extended Risch-Norman algorithm and some heuristics and pattern "
"matching:"
msgstr ""
"SymPy unterstützt unendliche und endliche Integration transzendenter "
"elementarer und spezieller Funktionen durch ``integrate()``, welches den "
"starken Risch-Norman-Algorithmus nutzt, sowie einige Heuristiken und "
"Mustererkennungen:"

#: tutorial.en.rst:521
msgid "You can integrate elementary functions:"
msgstr "Es können elementare Funktionen integriert werden:"

#: tutorial.en.rst:536
msgid "Also special functions are handled easily:"
msgstr "Aber auch mit speziellen Funktionen kann einfach umgegangen werden:"

#: tutorial.en.rst:546
msgid "It is possible to compute definite integrals:"
msgstr "Es ist möglich, ein endliches Integral zu berechnen:"

#: tutorial.en.rst:557
msgid "Also, improper integrals are supported as well:"
msgstr "Auch uneigentliche Integrale werden unterstützt:"

#: tutorial.en.rst:571
msgid "Complex numbers"
msgstr "Komplexe Zahlen"

#: tutorial.en.rst:573
msgid ""
"Besides the imaginary unit, I, which is imaginary, symbols can be created "
"with attributes (e.g. real, positive, complex, etc...) and this will affect "
"how they behave:"
msgstr ""
"Mit Ausnahme der imaginären Einheit, I, die rein imaginär ist, können "
"Symbole mit Attributen (z.B. reale, positive, komplex, usw.) erstellt "
"werden, und dies hat Auswirkungen darauf, wie sie sich verhalten:"

#: tutorial.en.rst:592
msgid "Functions"
msgstr "Funktionen"

#: tutorial.en.rst:594
msgid "**trigonometric**"
msgstr "**trigonometrische**"

#: tutorial.en.rst:645
msgid "**spherical harmonics**"
msgstr "**Kugelflächen**"

#: tutorial.en.rst:673
msgid "**factorials and gamma function**"
msgstr "**Fakultät und Gamma-Funktion**"

#: tutorial.en.rst:693
msgid "**zeta function**"
msgstr "**Zeta-Funktion**"

#: tutorial.en.rst:720
msgid "**polynomials**"
msgstr "**Polynome**"

#: tutorial.en.rst:761
msgid "Differential Equations"
msgstr "Differenzialgleichungen"

#: tutorial.en.rst:763 tutorial.en.rst:785
msgid "In ``isympy``:"
msgstr "In ``isympy``:"

#: tutorial.en.rst:783
msgid "Algebraic equations"
msgstr "Algebraische Gleichungen"

#: tutorial.en.rst:800
msgid "Linear Algebra"
msgstr "Lineare Algebra"

#: tutorial.en.rst:805
msgid "Matrices"
msgstr "Matrizen"

#: tutorial.en.rst:807
msgid "Matrices are created as instances from the Matrix class:"
msgstr "Matrizen werden als Instanzen der Matrix-Klasse erzeugt:"

#: tutorial.en.rst:817
msgid "They can also contain symbols:"
msgstr "Sie können auch Symbole enthalten:"

#: tutorial.en.rst:834
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""
"Mehr Informationen und Beispiele zu Matrizen finden sich im "
"LinearAlgebraTutorial."

#: tutorial.en.rst:839
msgid "Pattern matching"
msgstr "Musterabgleich"

#: tutorial.en.rst:841
msgid ""
"Use the ``.match()`` method, along with the ``Wild`` class, to perform "
"pattern matching on expressions. The method will return a dictionary with "
"the required substitutions, as follows:"
msgstr ""
"Die Methode ``.match()`` kann gemeinsam mit der Klasse ``Wild`` Ausdrücke "
"auf Muster überprüfen. Die Methode gibt ein dictionary mit den nötigen "
"Ersetzungen zurück, wie im folgenden Beispiel ersichtlich:"

#: tutorial.en.rst:857
msgid "If the match is unsuccessful, it returns ``None``:"
msgstr "Wenn der Musterabgleich fehlschlägt, wird ``None`` zurückgegeben:"

#: tutorial.en.rst:864
msgid ""
"One can also use the exclude parameter of the ``Wild`` class to ensure that "
"certain things do not show up in the result:"
msgstr ""
"Über den Parameter ``exclude`` kann man manches aus dem Ergebnis "
"ausschließen:"

#: tutorial.en.rst:880
msgid "Printing"
msgstr "Ausgabe"

#: tutorial.en.rst:882
msgid "There are many ways to print expressions."
msgstr "Es existieren mehrere Wege, Ausdrücke auszugeben:"

#: tutorial.en.rst:884
msgid "**Standard**"
msgstr "**Standard**"

#: tutorial.en.rst:886
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr "Dies ist die Ausgabe von ``str(expression)`` und sieht so aus:"

#: tutorial.en.rst:897
msgid "**Pretty printing**"
msgstr "**ASCII-Art-Ausgabe**"

#: tutorial.en.rst:899
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr "Eine ``pprint``-Funktion erzeugt diese hübschere ASCII-Art-Ausgabe."

#: tutorial.en.rst:918
msgid ""
"If you have a unicode font installed, the ``pprint`` function will use it by "
"default. You can override this using the ``use_unicode`` option.:"
msgstr ""
"Wenn eine Unicode-Schriftart installiert ist, sollte die ASCII-Art-Ausgabe "
"standardmäßig die Unicode-Fassung verwenden. Dies kann mit dem Parameter "
"``use_unicode`` erzwungen oder abgeschaltet werden."

#: tutorial.en.rst:927
msgid ""
"See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""
"Siehe auch die Wiki-Seite `Pretty Printing <https://github.com/sympy/sympy/"
"wiki/Pretty-Printing>`_ für mehr Beispiele von hübschen Unicode-Ausgaben."

#: tutorial.en.rst:931
msgid ""
"Tip: To make pretty printing the default in the Python interpreter, use:"
msgstr ""
"Tipp: Die ASCII-Art-Ausgabe kann auch als Standard-Methode gesetzt werden:"

#: tutorial.en.rst:956
msgid "**Python printing**"
msgstr "**Python-Ausgabe**"

#: tutorial.en.rst:974
msgid "**LaTeX printing**"
msgstr "**LaTeX-Ausgabe**"

#: tutorial.en.rst:993
msgid "**MathML**"
msgstr "**MathML**"

#: tutorial.en.rst:1005
msgid "**Pyglet**"
msgstr "**Pyglet**"

#: tutorial.en.rst:1013
msgid ""
"If pyglet is installed, a pyglet window will open containing the LaTeX "
"rendered expression:"
msgstr ""
"Dies öffnet ein pyglet-Fenster mit dem in LaTeX gerenderten Ausdruck, wenn "
"pyglet installiert ist:"

#: tutorial.en.rst:1019
msgid "Notes"
msgstr "Hinweise"

#: tutorial.en.rst:1021
msgid ""
"``isympy`` calls ``pprint`` automatically, so that's why you see pretty "
"printing by default."
msgstr ""
"``isympy`` ruft ``pprint`` automatisch auf -- deswegen sind die Ausgaben "
"standardmäßig hübsch."

#: tutorial.en.rst:1024
msgid ""
"Note that there is also a printing module available, ``sympy.printing``.  "
"Other printing methods available through this module are:"
msgstr ""
"Es ist gibt auch ein Ausgabemodul ``sympy.printing``. Andere "
"Ausgabemethoden, die durch dieses Modul erreichbar sind:"

#: tutorial.en.rst:1027
msgid ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, "
"respectively, a pretty representation of ``expr``. This is the same as the "
"second level of representation described above."
msgstr ""

#: tutorial.en.rst:1029
msgid ""
"``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a "
"`LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""

#: tutorial.en.rst:1031
msgid ""
"``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a "
"`MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""

#: tutorial.en.rst:1033
msgid ""
"``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview "
"<http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""

#: tutorial.en.rst:1036
msgid "Further documentation"
msgstr "Weitere Dokumentation"

#: tutorial.en.rst:1038
msgid ""
"Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's "
"Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""
"Nun ist Zeit, mehr über SymPy zu lernen. Lies den `SymPy User's Guide <../"
"guide.html>`_ und die `SymPy Modules Reference <../modules/index.html>`_."

#: tutorial.en.rst:1042
msgid ""
"Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/"
">`_, that contains a lot of useful examples, tutorials, cookbooks that we "
"and our users contributed, and feel free to edit it."
msgstr ""
"Unser öffentliches Wiki unter `wiki.sympy.org <http://wiki.sympy.org/>`_, "
"enthält einen Haufen nützlicher Beispiele und Anleitungen von uns und "
"unseren Nutzern. (Fühle dich frei, dazu beizutragen und Dinge zu verändern!)"

#: tutorial.en.rst:1049
msgid "Translations"
msgstr ""

#: tutorial.en.rst:1051
msgid "This tutorial is also available in other languages:"
msgstr ""
