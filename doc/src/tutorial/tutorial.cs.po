# Czech translation of the SymPy tutorial.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 15:09\n"
"PO-Revision-Date: 2011-12-27 11:52-0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: Czech\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial.en.rst:5
msgid "Tutorial"
msgstr "Tutoriál"

#: tutorial.en.rst:10
msgid "Introduction"
msgstr "Úvod"

#: tutorial.en.rst:12
msgid ""
"SymPy is a Python library for symbolic mathematics. It aims to become a full-"
"featured computer algebra system (CAS) while keeping the code as simple as "
"possible in order to be comprehensible and easily extensible.  SymPy is "
"written entirely in Python and does not require any external libraries."
msgstr ""
"SymPy je knihovna jazyka Python pro symbolickou matematiku. Má za cíl stát "
"se kompletním počítačovým algebraickým systémem (CAS, Computer algebra "
"system) a zároveň být co nejjednodušší, aby byla pochopitelná a jednoduše "
"rozšiřitelná. SymPy je napsaná kompletně v jazyce Python a nepotřebuje žádné "
"externí knihovny."

#: tutorial.en.rst:17
msgid ""
"This tutorial gives an overview and introduction to SymPy. Read this to have "
"an idea what SymPy can do for you (and how) and if you want to know more, "
"read the :ref:`SymPy User's Guide <guide>`, the :ref:`SymPy Modules "
"Reference <module-docs>`, or the `sources <https://github.com/sympy/sympy/"
">`_ directly."
msgstr ""
"Tento tutoriál je úvodem do SymPy a zároveň ukazuje, co SymPy umí. Přečtěte "
"si ho, aby jste zjistili, jak pro vás může být SymPy užitečná a pokud budete "
"chtít vědět víc, přečtěte si `Uživatelskou příručku SymPy <../guide.html>`_, "
"`Přehled modulů SymPy <../modules/index.html>`_, nebo přímo `zdrojové kódy "
"<https://github.com/sympy/sympy/>`_."

#: tutorial.en.rst:24
msgid "First Steps with SymPy"
msgstr "První kroky se SymPy"

#: tutorial.en.rst:26
msgid ""
"The easiest way to download it is to go to http://code.google.com/p/sympy/ "
"and download the latest tarball from the Featured Downloads:"
msgstr ""
"Nejjednodušší způsob, jak stáhnout SymPy je jít na http://code.google.com/p/"
"sympy/ a stáhnout nejnovější verzi z doporučených zdrojů:"

#: tutorial.en.rst:32
msgid "Unpack it:"
msgstr "Rozbalit ji:"

#: tutorial.en.rst:38
msgid "and try it from a Python interpreter:"
msgstr "a vyzkoušet jí v interpretru Pythonu:"

#: tutorial.en.rst:52
msgid ""
"You can use SymPy as shown above and this is indeed the recommended way if "
"you use it in your program. You can also install it using ``./setup.py "
"install`` as any other Python module, or just install a package in your "
"favourite Linux distribution, e.g.:"
msgstr ""
"Můžete používat SymPy, jak vidíte výše, což je doporučený způsob pokud jí "
"používate ve svém programu. Můžete si jí také nainstalovat pomocí ``./setup."
"py install`` jako každý modul Pythonu nebo si jednoduše nainstalovat balíček "
"do vaší oblíbené distribuce Linuxu. Například:"

#: tutorial.en.rst:78
#, fuzzy
msgid ""
"For other means how to install SymPy, consult the wiki page `Download and "
"Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_."
msgstr ""
"Pro další způsoby instalace SymPy si prohlédněte záložku Downloads_ na "
"stránkách SymPy."

#: tutorial.en.rst:83
msgid "isympy Console"
msgstr "isympy konzole"

#: tutorial.en.rst:85
#, fuzzy
msgid ""
"For experimenting with new features, or when figuring out how to do things, "
"you can use our special wrapper around IPython called ``isympy`` (located in "
"``bin/isympy`` if you are running from the source directory) which is just a "
"standard Python shell that has already imported the relevant SymPy modules "
"and defined the symbols x, y, z and some other things:"
msgstr ""
"Při zkoušení nových funkcí nebo když se snažíte něčemu přijít na kloub, "
"můžete použít na IPythonu založenou ``isympy`` (umístěnou v ``bin/isympy``, "
"pokud jí spouštíte ze složky se zdrojovým kódem) což je prostě standardní "
"Python shell, který má zapojené související SymPy moduly a definoval "
"symoboly x, y, z a některé další věci:"

#: tutorial.en.rst:115
msgid ""
"Commands entered by you are bold. Thus what we did in 3 lines in a regular "
"Python interpreter can be done in 1 line in isympy."
msgstr ""
"Vámi zadané příkazy jsou tučně. Vidíme, že to, co bychom udělali ve 3 "
"řádcích v běžném interpretru Pythonu, lze udělat v isympy v 1 řádku."

#: tutorial.en.rst:120
msgid "Using SymPy as a calculator"
msgstr "SymPy jako kalkulačka"

#: tutorial.en.rst:122
#, fuzzy
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr "SymPy má zabudované tři číselné typy: Float, Rational a Integer."

#: tutorial.en.rst:124
msgid ""
"The Rational class represents a rational number as a pair of two Integers: "
"the numerator and the denominator. So Rational(1, 2) represents 1/2, Rational"
"(5, 2) represents 5/2, and so on."
msgstr ""
"Třída Rational reprezentuje racionální čísla jako dvojici Integerů: čitatel "
"a jmenovatel Takže Rational(1, 2) reprezentuje 1/2, Rational(5, 2) reprezentuje "
"5/2, a tak dále."

#: tutorial.en.rst:143
msgid ""
"Proceed with caution while working with Python int's and floating point "
"numbers, especially in division, since you may create a Python number, not a "
"SymPy number. A ratio of two Python ints may create a float -- the \"true "
"division\" standard of Python 3 and the default behavior of ``isympy`` which "
"imports division from __future__:"
msgstr ""
"Postupujte opatrně, když pracujete s Inty a Floaty v Pythonu, obzvlášť při "
"dělení, jelikož můžete vytvořit číslo Pythonu místo SymPy. Podíl dvou Intů v "
"Pythonu může vytvořit Float -- \"pravé dělení\", standard Pythonu 3 a "
"defaultní chování ``isympy``, které vkládá dělení z __future__:"

#: tutorial.en.rst:155
msgid ""
"But in earlier Python versions where division has not been imported, a "
"truncated int will result:"
msgstr ""
"Ale v dřívějších verzích Pythonu, kde nebylo dělení zakomponováno, vyšel "
"oříznutý int:"

#: tutorial.en.rst:163
msgid ""
"In both cases, however, you are not dealing with a SymPy Number because "
"Python created its own number. Most of the time you will probably be working "
"with Rational numbers, so make sure to use Rational to get the SymPy result. "
"One might find it convenient to equate ``R`` and Rational:"
msgstr ""
"V obou případech se nejedná o číslo SymPy, protože Python vytvořil své "
"vlastní číslo. Většinu času budete pravděpodobně pracovat s čísly Rational, "
"takže dávejte pozor, abyste používali Rational a dostali tak výsledek SymPy. "
"Někomu může připadat příhodné používat místo dlouhého Rational krátké ``R``:"

#: tutorial.en.rst:177
msgid ""
"We also have some special constants, like e and pi, that are treated as "
"symbols (1 + pi won't evaluate to something numeric, rather it will remain "
"as 1 + pi), and have arbitrary precision:"
msgstr ""
"Také máme k dispozici několik konstant, jak e nebo pí, se kterými se pracuje "
"jako se symboly (1 + pi se nevypočítá jako numerická hodnota, ale ponechá se "
"1 + pi) a mají libovolnou přesnost:"

#: tutorial.en.rst:193
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""
"jak vidíte, evalf vyhodnotí výraz na číslo s pohyblivou desetinnou čárkou."

#: tutorial.en.rst:195
msgid "The symbol ``oo`` is used for a class defining mathematical infinity:"
msgstr "Symbol ``oo`` se používá pro třídu definující matematické nekonečno:"

#: tutorial.en.rst:206
msgid "Symbols"
msgstr "Symboly"

#: tutorial.en.rst:208
msgid ""
"In contrast to other Computer Algebra Systems, in SymPy you have to declare "
"symbolic variables explicitly:"
msgstr ""
"Narozdíl od jiných počítačových algebraických systémů, v SymPy je třeba "
"explicitně deklarovat symbolické proměnné:"

#: tutorial.en.rst:217
#, fuzzy
msgid ""
"On the left is the normal Python variable which has been assigned to the "
"SymPy Symbol class. Predefined symbols (including those for symbols with "
"Greek names) are available for import from abc:"
msgstr ""
"Nalevo je běžná proměnná Pythonu, která byla přiřazená SymPy třídě Symbol. "
"Instance třídy Symbol \"si dobře rozumí\" a jsou to stavební kameny výrazů:"

#: tutorial.en.rst:223
msgid ""
"Symbols can also be created with the ``symbols`` or ``var`` functions, the "
"latter automatically adding the created symbols to the namespace, and both "
"accepting a range notation:"
msgstr ""
"Symboly mohou být vytvořeny pomocí funkcí ``symbols`` nebo ``var``, kde "
"funkce ``var`` automaticky přídá vytvořené symboly do namespace, a jak "
"``symbols``, tak ``var`` podporují range notaci:"

#: tutorial.en.rst:235
#, fuzzy
msgid ""
"Instances of the Symbol class \"play well together\" and are the building "
"blocks of expresions:"
msgstr ""
"Nalevo je běžná proměnná Pythonu, která byla přiřazená SymPy třídě Symbol. "
"Instance třídy Symbol \"si dobře rozumí\" a jsou to stavební kameny výrazů:"

#: tutorial.en.rst:249
msgid ""
"They can be substituted with other numbers, symbols or expressions using "
"``subs(old, new)``:"
msgstr ""
"Mohou být nahrazeny jinými čísly, symboly nebo výrazy použitím ``subs(stary, "
"novy)``:"

#: tutorial.en.rst:262
msgid "For the remainder of the tutorial, we assume that we have run:"
msgstr "Pro celý zbytek tutoriálu předpokládejme, že jsme zadali:"

#: tutorial.en.rst:269
msgid ""
"This will make things look better when printed. See the :ref:`printing-"
"tutorial` section below. If you have a unicode font installed, you can pass "
"use_unicode=True for a slightly nicer output."
msgstr ""
"To nám zajistí hezčí výstup. Koukněte do sekce níže :ref:`printing-"
"tutorial`. Pokud máte nainstalovaný font unicode, volbou "
"``use_unicode=True`` dostanete o něco hezčí výstup."

#: tutorial.en.rst:274
msgid "Algebra"
msgstr "Algebra"

#: tutorial.en.rst:276
msgid "For partial fraction decomposition, use ``apart(expr, x)``:"
msgstr "Pro rozklad na parciální zlomky, použijte ``apart(expr, x)``:"

#: tutorial.en.rst:303
msgid "To combine things back together, use ``together(expr, x)``:"
msgstr "Pro zpětné sdružení věcí dohromady, použijte ``together(expr, x)``:"

#: tutorial.en.rst:327
msgid "Calculus"
msgstr "Analýza"

#: tutorial.en.rst:332
msgid "Limits"
msgstr "Limity"

#: tutorial.en.rst:334
#, fuzzy
msgid ""
"Limits are easy to use in SymPy, they follow the syntax ``limit(function, "
"variable, point)``, so to compute the limit of f(x) as x -> 0, you would "
"issue ``limit(f, x, 0)``:"
msgstr ""
"Limity se používají v sympy jednoduše, pomocí syntaxe ``limit(function, "
"variable, point)``, takže pro vypočtení limity f(x) pro x -> 0 byste "
"dosadili ``limit(f, x, 0)``:"

#: tutorial.en.rst:345
msgid "you can also calculate the limit at infinity:"
msgstr "také můžete spočítat limitu v nekonečnu:"

#: tutorial.en.rst:358
msgid ""
"for some non-trivial examples on limits, you can read the test file "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"
msgstr ""
"pro některé netriviální příklady limit si můžete přečíst testovací soubor  "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"

#: tutorial.en.rst:365
msgid "Differentiation"
msgstr "Derivace"

#: tutorial.en.rst:367
msgid ""
"You can differentiate any SymPy expression using ``diff(func, var)``. "
"Examples:"
msgstr ""
"Můžete derivovat libovolný výraz v SymPy pomocí ``diff(func, var)``. "
"Například:"

#: tutorial.en.rst:382
msgid "You can check, that it is correct by:"
msgstr "Výsledek si můžete zkontrolovat:"

#: tutorial.en.rst:392
msgid ""
"Higher derivatives can be calculated using the ``diff(func, var, n)`` method:"
msgstr "Vyšší derivace můžete spočítat pomocí ``diff(func, var, n)``:"

#: tutorial.en.rst:411
msgid "Series expansion"
msgstr "Rozvoj v řady"

#: tutorial.en.rst:413
msgid "Use ``.series(var, point, order)``:"
msgstr "Použijte ``.series(var, point, order)``:"

#: tutorial.en.rst:430
msgid "Another simple example:"
msgstr "Další jednoduchý příklad:"

#: tutorial.en.rst:456
msgid "Summation"
msgstr ""

#: tutorial.en.rst:458
msgid ""
"Compute the summation of f with respect to the given summation variable over "
"the given limits."
msgstr ""

#: tutorial.en.rst:460
msgid ""
"summation(f, (i, a, b)) computes the sum of f with respect to i from a to b, "
"i.e.,"
msgstr ""

#: tutorial.en.rst:473
msgid ""
"If it cannot compute the sum, it prints the corresponding summation formula. "
"Repeated sums can be computed by introducing additional limits:"
msgstr ""

#: tutorial.en.rst:509
msgid "Integration"
msgstr "Integrály"

#: tutorial.en.rst:511
msgid ""
"SymPy has support for indefinite and definite integration of transcendental "
"elementary and special functions via ``integrate()`` facility, which uses "
"powerful extended Risch-Norman algorithm and some heuristics and pattern "
"matching:"
msgstr ""
"SymPy umí počítat neurčité a určité integrály elementárních a speciálních "
"transcendentních funkcí pomocí fuknce ``integrate()``, která využívá silného "
"rozšířeného Risch-Normanova algoritmu, některých heuristik a porovnávání "
"vzorků:"

#: tutorial.en.rst:521
msgid "You can integrate elementary functions:"
msgstr "Můžete integrovat elementární funkce:"

#: tutorial.en.rst:536
msgid "Also special functions are handled easily:"
msgstr "Také speciální funkce lze jednoduše integrovat:"

#: tutorial.en.rst:546
#, fuzzy
msgid "It is possible to compute definite integrals:"
msgstr "Je možné vypočítat určitý integrál:"

#: tutorial.en.rst:557
#, fuzzy
msgid "Also, improper integrals are supported as well:"
msgstr "Podporovány jsou i nevlastní integrály:"

#: tutorial.en.rst:571
msgid "Complex numbers"
msgstr "Komplexní čísla"

#: tutorial.en.rst:573
msgid ""
"Besides the imaginary unit, I, which is imaginary, symbols can be created "
"with attributes (e.g. real, positive, complex, etc...) and this will affect "
"how they behave:"
msgstr ""
"Kromě imaginárního čísla, I, symboly mohou být vytvořeny s atributy "
"(například real, positive, complex, atd...), a to ovlivní jak se budou "
"chovat:"

#: tutorial.en.rst:592
msgid "Functions"
msgstr "Funkce"

#: tutorial.en.rst:594
msgid "**trigonometric**"
msgstr "**trigonometrické**"

#: tutorial.en.rst:645
msgid "**spherical harmonics**"
msgstr "**Sférické funkce**"

#: tutorial.en.rst:673
msgid "**factorials and gamma function**"
msgstr "**Faktoriály a gamma funkce**"

#: tutorial.en.rst:693
msgid "**zeta function**"
msgstr "**Zeta funkce**"

#: tutorial.en.rst:720
msgid "**polynomials**"
msgstr "**Polynomy**"

#: tutorial.en.rst:761
msgid "Differential Equations"
msgstr "Diferenciální rovnice"

#: tutorial.en.rst:763 tutorial.en.rst:785
msgid "In ``isympy``:"
msgstr "V ``isympy``:"

#: tutorial.en.rst:783
msgid "Algebraic equations"
msgstr "Algebraické rovnice"

#: tutorial.en.rst:800
msgid "Linear Algebra"
msgstr "Lineární algebra"

#: tutorial.en.rst:805
msgid "Matrices"
msgstr "Matice"

#: tutorial.en.rst:807
msgid "Matrices are created as instances from the Matrix class:"
msgstr "Matice jsou vytvořeny jako instance třídy Matrix:"

#: tutorial.en.rst:817
#, fuzzy
msgid "They can also contain symbols:"
msgstr "Lze tam také vložit symboly:"

#: tutorial.en.rst:834
#, fuzzy
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""
"Pro více informací a příkladů s maticemi se podívejte na Linear Algebra "
"tutorial."

#: tutorial.en.rst:839
msgid "Pattern matching"
msgstr "Porovnávání vzorků"

#: tutorial.en.rst:841
msgid ""
"Use the ``.match()`` method, along with the ``Wild`` class, to perform "
"pattern matching on expressions. The method will return a dictionary with "
"the required substitutions, as follows:"
msgstr ""
"Použijte metodu ``.match()`` spolu s třídou ``Wild`` pro porovnávání výrazů. "
"Metoda vrátí slovník s požadovanými substitucemi, jako vidíme zde:"

#: tutorial.en.rst:857
msgid "If the match is unsuccessful, it returns ``None``:"
msgstr "Pokud je porovnání neúspěšné, vrátí ``None``:"

#: tutorial.en.rst:864
msgid ""
"One can also use the exclude parameter of the ``Wild`` class to ensure that "
"certain things do not show up in the result:"
msgstr ""
"Lze také použít parametr ``exclude`` třídy ``Wild``, aby se určité věci "
"nezobrazily ve výsledku:"

#: tutorial.en.rst:880
msgid "Printing"
msgstr "Výpis"

#: tutorial.en.rst:882
msgid "There are many ways to print expressions."
msgstr "Je spousta způsobů, jak mohou být výrazy vypisovány."

#: tutorial.en.rst:884
msgid "**Standard**"
msgstr "**Standardní**"

#: tutorial.en.rst:886
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr "To je to, co vrátí ``str(expression)`` a vypadá to takto:"

#: tutorial.en.rst:897
msgid "**Pretty printing**"
msgstr "**Pěkný výpis**"

#: tutorial.en.rst:899
#, fuzzy
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr "To je pěkný ascii-art výpis vytvořený funkcí ``pprint``:"

#: tutorial.en.rst:918
#, fuzzy
msgid ""
"If you have a unicode font installed, the ``pprint`` function will use it by "
"default. You can override this using the ``use_unicode`` option.:"
msgstr ""
"Pokud máte nainstalované písmo unicode, měla by ho funkce automaticky "
"využívat. Využívání unicode písma se dá nastavit změnou ``use_unicode``:"

#: tutorial.en.rst:927
msgid ""
"See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""
"Pro více příkladů pěkného unicode výstupu koukněte na wiki na `Pretty "
"Printing <https://github.com/sympy/sympy/wiki/Pretty-Printing>`_"

#: tutorial.en.rst:931
#, fuzzy
msgid ""
"Tip: To make pretty printing the default in the Python interpreter, use:"
msgstr ""
"Tip: Pokud chcete v interpretru Pythonu pěkné vypisování používat defaultně, "
"proveďte:"

#: tutorial.en.rst:956
msgid "**Python printing**"
msgstr "**Python výstup**"

#: tutorial.en.rst:974
msgid "**LaTeX printing**"
msgstr "**LaTeX výstup**"

#: tutorial.en.rst:993
msgid "**MathML**"
msgstr "**MathML**"

#: tutorial.en.rst:1005
msgid "**Pyglet**"
msgstr "**Pyglet**"

#: tutorial.en.rst:1013
#, fuzzy
msgid ""
"If pyglet is installed, a pyglet window will open containing the LaTeX "
"rendered expression:"
msgstr "A vyskočí pyglet okno s výrazem formátovaným v LaTeXu:"

#: tutorial.en.rst:1019
msgid "Notes"
msgstr "Poznámky"

#: tutorial.en.rst:1021
msgid ""
"``isympy`` calls ``pprint`` automatically, so that's why you see pretty "
"printing by default."
msgstr ""
"``isympy`` volá ``pprint`` automaticky, proto standardně vidíte pěkný výpis."

#: tutorial.en.rst:1024
msgid ""
"Note that there is also a printing module available, ``sympy.printing``.  "
"Other printing methods available through this module are:"
msgstr ""
"Všimněte si, že je přístupný modul pro výpisy, ``sympy.printing``. Další "
"metody dostupné díky tomuto modulu jsou:"

#: tutorial.en.rst:1027
msgid ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, "
"respectively, a pretty representation of ``expr``. This is the same as the "
"second level of representation described above."
msgstr ""
"* ``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Vrací "
"respektive vypisuje, pěknou reprezentaci ``expr``. Je to jako druhá úroveň "
"reprezentace popsané výše."

#: tutorial.en.rst:1029
msgid ""
"``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a "
"`LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""
"``latex(expr)``, ``print_latex(expr)``: Vrací, respektive vypisuje, `LaTeX "
"<http://www.latex-project.org/>`_  reprezentaci ``expr``"

#: tutorial.en.rst:1031
msgid ""
"``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a "
"`MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""
" ``mathml(expr)``, ``print_mathml(expr)``: Vrací, respektive vypisuje, "
"`MathML <http://www.w3.org/Math/>`_ reprezentaci ``expr``."

#: tutorial.en.rst:1033
msgid ""
"``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview "
"<http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""
"``print_gtk(expr)``: Vypisuje ``expr`` do `Gtkmathview <http://helm.cs.unibo."
"it/mml-widget/>`_, GTK widgetu, který zobrazuje MathML kód. Je vyžadován "
"program `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_."

#: tutorial.en.rst:1036
msgid "Further documentation"
msgstr "Další dokumentace"

#: tutorial.en.rst:1038
msgid ""
"Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's "
"Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""
"Nyní je čas dozvědět se více o SymPy. Pročtěte si `Uživatelskou příručku "
"SymPy <../guide.html>`_ a `Přehled modulů SymPy <../modules/index.html>`_."

#: tutorial.en.rst:1042
#, fuzzy
msgid ""
"Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/"
">`_, that contains a lot of useful examples, tutorials, cookbooks that we "
"and our users contributed, and feel free to edit it."
msgstr ""
"Také si projděte naší veřejnou `wiki.sympy.org <http://wiki.sympy.org/>`_, "
"která obsahuje spoustu užitečných příkladů, tutoriálů a kuchařek, které jsme "
"my a naši uživatelé dodali. A nebojte se je upravit."

#: tutorial.en.rst:1049
msgid "Translations"
msgstr "Překlady"

#: tutorial.en.rst:1051
msgid "This tutorial is also available in other languages:"
msgstr "Tento tutoriál je také k dispozici v těchto jazycích:"
