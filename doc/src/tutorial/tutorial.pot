# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 15:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial.en.rst:5
msgid "Tutorial"
msgstr ""

#: tutorial.en.rst:10
msgid "Introduction"
msgstr ""

#: tutorial.en.rst:12
msgid "SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.  SymPy is written entirely in Python and does not require any external libraries."
msgstr ""

#: tutorial.en.rst:17
msgid "This tutorial gives an overview and introduction to SymPy. Read this to have an idea what SymPy can do for you (and how) and if you want to know more, read the :ref:`SymPy User's Guide <guide>`, the :ref:`SymPy Modules Reference <module-docs>`, or the `sources <https://github.com/sympy/sympy/>`_ directly."
msgstr ""

#: tutorial.en.rst:24
msgid "First Steps with SymPy"
msgstr ""

#: tutorial.en.rst:26
msgid "The easiest way to download it is to go to http://code.google.com/p/sympy/ and download the latest tarball from the Featured Downloads:"
msgstr ""

#: tutorial.en.rst:32
msgid "Unpack it:"
msgstr ""

#: tutorial.en.rst:38
msgid "and try it from a Python interpreter:"
msgstr ""

#: tutorial.en.rst:52
msgid "You can use SymPy as shown above and this is indeed the recommended way if you use it in your program. You can also install it using ``./setup.py install`` as any other Python module, or just install a package in your favourite Linux distribution, e.g.:"
msgstr ""

#: tutorial.en.rst:78
msgid "For other means how to install SymPy, consult the wiki page `Download and Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_."
msgstr ""

#: tutorial.en.rst:83
msgid "isympy Console"
msgstr ""

#: tutorial.en.rst:85
msgid "For experimenting with new features, or when figuring out how to do things, you can use our special wrapper around IPython called ``isympy`` (located in ``bin/isympy`` if you are running from the source directory) which is just a standard Python shell that has already imported the relevant SymPy modules and defined the symbols x, y, z and some other things:"
msgstr ""

#: tutorial.en.rst:115
msgid "Commands entered by you are bold. Thus what we did in 3 lines in a regular Python interpreter can be done in 1 line in isympy."
msgstr ""

#: tutorial.en.rst:120
msgid "Using SymPy as a calculator"
msgstr ""

#: tutorial.en.rst:122
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr ""

#: tutorial.en.rst:124
msgid "The Rational class represents a rational number as a pair of two Integers: the numerator and the denominator. So Rational(1, 2) represents 1/2, Rational(5, 2) represents 5/2, and so on."
msgstr ""

#: tutorial.en.rst:143
msgid "Proceed with caution while working with Python int's and floating point numbers, especially in division, since you may create a Python number, not a SymPy number. A ratio of two Python ints may create a float -- the \"true division\" standard of Python 3 and the default behavior of ``isympy`` which imports division from __future__:"
msgstr ""

#: tutorial.en.rst:155
msgid "But in earlier Python versions where division has not been imported, a truncated int will result:"
msgstr ""

#: tutorial.en.rst:163
msgid "In both cases, however, you are not dealing with a SymPy Number because Python created its own number. Most of the time you will probably be working with Rational numbers, so make sure to use Rational to get the SymPy result. One might find it convenient to equate ``R`` and Rational:"
msgstr ""

#: tutorial.en.rst:177
msgid "We also have some special constants, like e and pi, that are treated as symbols (1 + pi won't evaluate to something numeric, rather it will remain as 1 + pi), and have arbitrary precision:"
msgstr ""

#: tutorial.en.rst:193
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""

#: tutorial.en.rst:195
msgid "The symbol ``oo`` is used for a class defining mathematical infinity:"
msgstr ""

#: tutorial.en.rst:206
msgid "Symbols"
msgstr ""

#: tutorial.en.rst:208
msgid "In contrast to other Computer Algebra Systems, in SymPy you have to declare symbolic variables explicitly:"
msgstr ""

#: tutorial.en.rst:217
msgid "On the left is the normal Python variable which has been assigned to the SymPy Symbol class. Predefined symbols (including those for symbols with Greek names) are available for import from abc:"
msgstr ""

#: tutorial.en.rst:223
msgid "Symbols can also be created with the ``symbols`` or ``var`` functions, the latter automatically adding the created symbols to the namespace, and both accepting a range notation:"
msgstr ""

#: tutorial.en.rst:235
msgid "Instances of the Symbol class \"play well together\" and are the building blocks of expresions:"
msgstr ""

#: tutorial.en.rst:249
msgid "They can be substituted with other numbers, symbols or expressions using ``subs(old, new)``:"
msgstr ""

#: tutorial.en.rst:262
msgid "For the remainder of the tutorial, we assume that we have run:"
msgstr ""

#: tutorial.en.rst:269
msgid "This will make things look better when printed. See the :ref:`printing-tutorial` section below. If you have a unicode font installed, you can pass use_unicode=True for a slightly nicer output."
msgstr ""

#: tutorial.en.rst:274
msgid "Algebra"
msgstr ""

#: tutorial.en.rst:276
msgid "For partial fraction decomposition, use ``apart(expr, x)``:"
msgstr ""

#: tutorial.en.rst:303
msgid "To combine things back together, use ``together(expr, x)``:"
msgstr ""

#: tutorial.en.rst:327
msgid "Calculus"
msgstr ""

#: tutorial.en.rst:332
msgid "Limits"
msgstr ""

#: tutorial.en.rst:334
msgid "Limits are easy to use in SymPy, they follow the syntax ``limit(function, variable, point)``, so to compute the limit of f(x) as x -> 0, you would issue ``limit(f, x, 0)``:"
msgstr ""

#: tutorial.en.rst:345
msgid "you can also calculate the limit at infinity:"
msgstr ""

#: tutorial.en.rst:358
msgid "for some non-trivial examples on limits, you can read the test file `test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/tests/test_demidovich.py>`_"
msgstr ""

#: tutorial.en.rst:365
msgid "Differentiation"
msgstr ""

#: tutorial.en.rst:367
msgid "You can differentiate any SymPy expression using ``diff(func, var)``. Examples:"
msgstr ""

#: tutorial.en.rst:382
msgid "You can check, that it is correct by:"
msgstr ""

#: tutorial.en.rst:392
msgid "Higher derivatives can be calculated using the ``diff(func, var, n)`` method:"
msgstr ""

#: tutorial.en.rst:411
msgid "Series expansion"
msgstr ""

#: tutorial.en.rst:413
msgid "Use ``.series(var, point, order)``:"
msgstr ""

#: tutorial.en.rst:430
msgid "Another simple example:"
msgstr ""

#: tutorial.en.rst:456
msgid "Summation"
msgstr ""

#: tutorial.en.rst:458
msgid "Compute the summation of f with respect to the given summation variable over the given limits."
msgstr ""

#: tutorial.en.rst:460
msgid "summation(f, (i, a, b)) computes the sum of f with respect to i from a to b, i.e.,"
msgstr ""

#: tutorial.en.rst:473
msgid "If it cannot compute the sum, it prints the corresponding summation formula. Repeated sums can be computed by introducing additional limits:"
msgstr ""

#: tutorial.en.rst:509
msgid "Integration"
msgstr ""

#: tutorial.en.rst:511
msgid "SymPy has support for indefinite and definite integration of transcendental elementary and special functions via ``integrate()`` facility, which uses powerful extended Risch-Norman algorithm and some heuristics and pattern matching:"
msgstr ""

#: tutorial.en.rst:521
msgid "You can integrate elementary functions:"
msgstr ""

#: tutorial.en.rst:536
msgid "Also special functions are handled easily:"
msgstr ""

#: tutorial.en.rst:546
msgid "It is possible to compute definite integrals:"
msgstr ""

#: tutorial.en.rst:557
msgid "Also, improper integrals are supported as well:"
msgstr ""

#: tutorial.en.rst:571
msgid "Complex numbers"
msgstr ""

#: tutorial.en.rst:573
msgid "Besides the imaginary unit, I, which is imaginary, symbols can be created with attributes (e.g. real, positive, complex, etc...) and this will affect how they behave:"
msgstr ""

#: tutorial.en.rst:592
msgid "Functions"
msgstr ""

#: tutorial.en.rst:594
msgid "**trigonometric**"
msgstr ""

#: tutorial.en.rst:645
msgid "**spherical harmonics**"
msgstr ""

#: tutorial.en.rst:673
msgid "**factorials and gamma function**"
msgstr ""

#: tutorial.en.rst:693
msgid "**zeta function**"
msgstr ""

#: tutorial.en.rst:720
msgid "**polynomials**"
msgstr ""

#: tutorial.en.rst:761
msgid "Differential Equations"
msgstr ""

#: tutorial.en.rst:763
#: tutorial.en.rst:785
msgid "In ``isympy``:"
msgstr ""

#: tutorial.en.rst:783
msgid "Algebraic equations"
msgstr ""

#: tutorial.en.rst:800
msgid "Linear Algebra"
msgstr ""

#: tutorial.en.rst:805
msgid "Matrices"
msgstr ""

#: tutorial.en.rst:807
msgid "Matrices are created as instances from the Matrix class:"
msgstr ""

#: tutorial.en.rst:817
msgid "They can also contain symbols:"
msgstr ""

#: tutorial.en.rst:834
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""

#: tutorial.en.rst:839
msgid "Pattern matching"
msgstr ""

#: tutorial.en.rst:841
msgid "Use the ``.match()`` method, along with the ``Wild`` class, to perform pattern matching on expressions. The method will return a dictionary with the required substitutions, as follows:"
msgstr ""

#: tutorial.en.rst:857
msgid "If the match is unsuccessful, it returns ``None``:"
msgstr ""

#: tutorial.en.rst:864
msgid "One can also use the exclude parameter of the ``Wild`` class to ensure that certain things do not show up in the result:"
msgstr ""

#: tutorial.en.rst:880
msgid "Printing"
msgstr ""

#: tutorial.en.rst:882
msgid "There are many ways to print expressions."
msgstr ""

#: tutorial.en.rst:884
msgid "**Standard**"
msgstr ""

#: tutorial.en.rst:886
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr ""

#: tutorial.en.rst:897
msgid "**Pretty printing**"
msgstr ""

#: tutorial.en.rst:899
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr ""

#: tutorial.en.rst:918
msgid "If you have a unicode font installed, the ``pprint`` function will use it by default. You can override this using the ``use_unicode`` option.:"
msgstr ""

#: tutorial.en.rst:927
msgid "See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""

#: tutorial.en.rst:931
msgid "Tip: To make pretty printing the default in the Python interpreter, use:"
msgstr ""

#: tutorial.en.rst:956
msgid "**Python printing**"
msgstr ""

#: tutorial.en.rst:974
msgid "**LaTeX printing**"
msgstr ""

#: tutorial.en.rst:993
msgid "**MathML**"
msgstr ""

#: tutorial.en.rst:1005
msgid "**Pyglet**"
msgstr ""

#: tutorial.en.rst:1013
msgid "If pyglet is installed, a pyglet window will open containing the LaTeX rendered expression:"
msgstr ""

#: tutorial.en.rst:1019
msgid "Notes"
msgstr ""

#: tutorial.en.rst:1021
msgid "``isympy`` calls ``pprint`` automatically, so that's why you see pretty printing by default."
msgstr ""

#: tutorial.en.rst:1024
msgid "Note that there is also a printing module available, ``sympy.printing``.  Other printing methods available through this module are:"
msgstr ""

#: tutorial.en.rst:1027
msgid "``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, respectively, a pretty representation of ``expr``. This is the same as the second level of representation described above."
msgstr ""

#: tutorial.en.rst:1029
msgid "``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a `LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""

#: tutorial.en.rst:1031
msgid "``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a `MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""

#: tutorial.en.rst:1033
msgid "``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""

#: tutorial.en.rst:1036
msgid "Further documentation"
msgstr ""

#: tutorial.en.rst:1038
msgid "Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""

#: tutorial.en.rst:1042
msgid "Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/>`_, that contains a lot of useful examples, tutorials, cookbooks that we and our users contributed, and feel free to edit it."
msgstr ""

#: tutorial.en.rst:1049
msgid "Translations"
msgstr ""

#: tutorial.en.rst:1051
msgid "This tutorial is also available in other languages:"
msgstr ""

