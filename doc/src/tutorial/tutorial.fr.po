# French translation of the SymPy tutorial.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 15:09\n"
"PO-Revision-Date: 2012-12-10 15:32\n"
"Last-Translator: Julien Rioux <julien.rioux@gmail.com>\n"
"Language-Team: \n"
"Language: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial.en.rst:5
msgid "Tutorial"
msgstr "Tutoriel"

#: tutorial.en.rst:10
msgid "Introduction"
msgstr "Introduction"

#: tutorial.en.rst:12
msgid ""
"SymPy is a Python library for symbolic mathematics. It aims to become a full-"
"featured computer algebra system (CAS) while keeping the code as simple as "
"possible in order to be comprehensible and easily extensible.  SymPy is "
"written entirely in Python and does not require any external libraries."
msgstr ""
"SymPy est une bibliothèque Python pour les mathématiques symboliques. SymPy "
"prévoit devenir un système complet de calcul formel (\"CAS\" en anglais : "
"\"Computer Algebra System\") tout en gardant le code aussi simple que "
"possible afin qu'il soit compréhensible et facilement extensible. SymPy est "
"entièrement écrit en Python et ne nécessite aucune bibliothèque externe."

#: tutorial.en.rst:17
msgid ""
"This tutorial gives an overview and introduction to SymPy. Read this to have "
"an idea what SymPy can do for you (and how) and if you want to know more, "
"read the :ref:`SymPy User's Guide <guide>`, the :ref:`SymPy Modules "
"Reference <module-docs>`, or the `sources <https://github.com/sympy/sympy/"
">`_ directly."
msgstr ""
"Ce tutoriel donne un aperçu et une introduction à SymPy. Lisez-le pour vous "
"faire une idée de ce que SymPy peut faire pour vous (et comment). Pour en "
"savoir plus, consultez également le `SymPy User's Guide <../guide.html>`_, "
"la `SymPy Modules Reference <../modules/index.html>`_, ou le `code source "
"<https://github.com/sympy/sympy/>`_ directement."

#: tutorial.en.rst:24
msgid "First Steps with SymPy"
msgstr "Premiers pas avec SymPy"

#: tutorial.en.rst:26
msgid ""
"The easiest way to download it is to go to http://code.google.com/p/sympy/ "
"and download the latest tarball from the Featured Downloads:"
msgstr ""
"La façon la plus simple de télécharger SymPy est de se rendre sur http://"
"code.google.com/p/sympy/ et de télécharger la dernière archive des "
"Téléchargements Recommandés (\"Featured Downloads\" en anglais)."

#: tutorial.en.rst:32
msgid "Unpack it:"
msgstr "Décompressez-la :"

#: tutorial.en.rst:38
msgid "and try it from a Python interpreter:"
msgstr "et essayez-la dans un interpréteur Python :"

#: tutorial.en.rst:52
msgid ""
"You can use SymPy as shown above and this is indeed the recommended way if "
"you use it in your program. You can also install it using ``./setup.py "
"install`` as any other Python module, or just install a package in your "
"favourite Linux distribution, e.g.:"
msgstr ""
"Vous pouvez utiliser SymPy comme illustré ci-dessus et c'est en effet la "
"méthode recommandée si vous voulez l'utiliser dans votre programme. Vous "
"pouvez aussi l'installer en utilisant ``./setup.py install`` comme tout "
"autre module Python, ou simplement installer un paquet dans votre "
"distribution Linux préférée, par exemple :"

#: tutorial.en.rst:78
msgid ""
"For other means how to install SymPy, consult the wiki page `Download and "
"Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_."
msgstr ""
"Pour d'autres moyens d'installer SymPy, consultez `Download and "
"Installation (en anglais) <https://github.com/sympy/sympy/wiki/Download-Installation>`_ "
"sur le site wiki de SymPy."

#: tutorial.en.rst:83
msgid "isympy Console"
msgstr "La console isympy"

#: tutorial.en.rst:85
msgid ""
"For experimenting with new features, or when figuring out how to do things, "
"you can use our special wrapper around IPython called ``isympy`` (located in "
"``bin/isympy`` if you are running from the source directory) which is just a "
"standard Python shell that has already imported the relevant SymPy modules "
"and defined the symbols x, y, z and some other things:"
msgstr ""
"Pour tester de nouvelles fonctionnalités, ou si vous cherchez à savoir "
"comment accomplir certaines choses, vous pouvez utiliser notre emballage "
"(wrapper) spécial enrobant IPython appelé ``isympy`` (situé dans ``bin/"
"isympy`` si vous vous trouvez dans le répertoire source). Cette commande "
"lance un shell Python standard qui importe les modules SymPy les plus "
"courants, les symboles définis x, y, z et d'autres choses à l'avance :"

#: tutorial.en.rst:115
msgid ""
"Commands entered by you are bold. Thus what we did in 3 lines in a regular "
"Python interpreter can be done in 1 line in isympy."
msgstr ""
"Les commandes que vous entrez sont en gras. Ainsi ce que nous avons fait en "
"3 lignes dans un interpréteur Python habituel peut être fait en une ligne "
"avec isympy."

#: tutorial.en.rst:120
msgid "Using SymPy as a calculator"
msgstr "Utiliser SymPy comme une calculatrice"

#: tutorial.en.rst:122
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr ""
"SymPy possède trois types numériques natifs : Float (Flottant), Rational "
"(Rationnel) et Integer (Entier)."

#: tutorial.en.rst:124
msgid ""
"The Rational class represents a rational number as a pair of two Integers: "
"the numerator and the denominator. So Rational(1, 2) represents 1/2, Rational"
"(5, 2) represents 5/2, and so on."
msgstr ""
"La classe Rational représente un nombre rationnel en tant que paire de deux "
"Integers : le numérateur et le dénominateur. Donc Rational(1, 2) représente "
"1/2, Rational(5, 2) représente 5/2, et ainsi de suite."

#: tutorial.en.rst:143
msgid ""
"Proceed with caution while working with Python int's and floating point "
"numbers, especially in division, since you may create a Python number, not a "
"SymPy number. A ratio of two Python ints may create a float -- the \"true "
"division\" standard of Python 3 and the default behavior of ``isympy`` which "
"imports division from __future__:"
msgstr ""
"Faites attention lorsque vous travaillez avec les nombres entiers et à "
"virgule flottante de Python, surtout dans des divisions, puisque vous "
"pourriez créer un nombre Python, et non pas un nombre SymPy. Un ratio de "
"deux entiers Python pourrait créer un flottant -- la \"vraie division\", "
"standard sous Python 3 et le comportement par défaut de ``isympy`` qui "
"importe l'opération division du module __future__ :"

#: tutorial.en.rst:155
msgid ""
"But in earlier Python versions where division has not been imported, a "
"truncated int will result:"
msgstr ""
"Cependant, dans les versions antérieures à Python 3, l'opération division "
"résulte par défaut en une divison euclidienne et entraînera :"

#: tutorial.en.rst:163
msgid ""
"In both cases, however, you are not dealing with a SymPy Number because "
"Python created its own number. Most of the time you will probably be working "
"with Rational numbers, so make sure to use Rational to get the SymPy result. "
"One might find it convenient to equate ``R`` and Rational:"
msgstr ""
"Dans les deux cas, toutefois, vous n'avez pas affaire à un nombre SymPy "
"parce que Python a créé son propre nombre. La plupart du temps vous "
"travaillerez fort probablement avec des nombres rationels, alors prenez "
"garde à utiliser Rational pour obtenir le résultat en terme d'objets SymPy. "
"On pourrait trouver pratique d'assigner Rational à ``R`` :"

#: tutorial.en.rst:177
msgid ""
"We also have some special constants, like e and pi, that are treated as "
"symbols (1 + pi won't evaluate to something numeric, rather it will remain "
"as 1 + pi), and have arbitrary precision:"
msgstr ""
"SymPy offre également quelques constantes spéciales, comme e et pi, qui sont "
"traitées comme des symboles (1 + pi ne sera pas évalué sous forme numérique, "
"mais restera plutôt sous la forme 1 + pi), et qui ont une précision "
"arbitraire :"

#: tutorial.en.rst:193
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""
"Comme vous le voyez, evalf convertit l'expression en un nombre à virgule "
"flottante."

#: tutorial.en.rst:195
msgid "The symbol ``oo`` is used for a class defining mathematical infinity:"
msgstr ""
"Le symbole ``oo`` est utilisé pour une classe définissant l'infini "
"mathématique :"

#: tutorial.en.rst:206
msgid "Symbols"
msgstr "Symboles"

#: tutorial.en.rst:208
msgid ""
"In contrast to other Computer Algebra Systems, in SymPy you have to declare "
"symbolic variables explicitly:"
msgstr ""
"Contrairement à d'autres systèmes de calcul formel, SymPy vous oblige à "
"déclarer les variables symboliques explicitement :"

#: tutorial.en.rst:217
msgid ""
"On the left is the normal Python variable which has been assigned to the "
"SymPy Symbol class. Predefined symbols (including those for symbols with "
"Greek names) are available for import from abc:"
msgstr ""
"À gauche se trouve la variable Python normale à laquelle est assignée une "
"instance de la classe Symbol de SymPy. Certains symboles prédefinis (dont "
"les symboles portant un nom grec) sont disponibles après importation :"

#: tutorial.en.rst:223
msgid ""
"Symbols can also be created with the ``symbols`` or ``var`` functions, the "
"latter automatically adding the created symbols to the namespace, and both "
"accepting a range notation:"
msgstr ""
"Plusieurs symboles peuvent également être déclarés en utilisant une seule "
"commande avec les fonctions ``symbols`` ou ``var``. Ces fonctions acceptent "
"une chaîne de texte contenant une liste ou un interval de symboles à "
"déclarer, la variante ``var`` ajoutant également les symboles à la liste de "
"noms courante (namespace) :"

#: tutorial.en.rst:235
msgid ""
"Instances of the Symbol class \"play well together\" and are the building "
"blocks of expresions:"
msgstr ""
"Les instances de la classe Symbol travaillent ensemble et sont les "
"fondements nécessaires pour construire des expressions :"

#: tutorial.en.rst:249
msgid ""
"They can be substituted with other numbers, symbols or expressions using "
"``subs(old, new)``:"
msgstr ""
"Elles peuvent être remplacées par d'autres nombres, symboles ou expressions "
"grâce à l'utilisation de ``subs(old, new)`` :"

#: tutorial.en.rst:262
msgid "For the remainder of the tutorial, we assume that we have run:"
msgstr "Pour le reste du tutoriel, il est présumé que nous avons exécuté :"

#: tutorial.en.rst:269
msgid ""
"This will make things look better when printed. See the :ref:`printing-"
"tutorial` section below. If you have a unicode font installed, you can pass "
"use_unicode=True for a slightly nicer output."
msgstr ""
"Ceci donnera un meilleur aspect aux résultats affichées. Pour en savoir plus "
"sur l'affichage, consultez la section :ref:`printing-tutorial` ci-dessous. "
"Si vous avez une police unicode installée, vous pouvez passer "
"use_unicode=True pour un affichage un peu plus agréable."

#: tutorial.en.rst:274
msgid "Algebra"
msgstr "Algèbre"

#: tutorial.en.rst:276
msgid "For partial fraction decomposition, use ``apart(expr, x)``:"
msgstr ""
"Pour la décomposition en éléments simples des fractions, utilisez ``apart"
"(expr, x)`` :"

#: tutorial.en.rst:303
msgid "To combine things back together, use ``together(expr, x)``:"
msgstr "Pour remettre tout ensemble, utilisez ``together(expr, x)`` :"

#: tutorial.en.rst:327
msgid "Calculus"
msgstr "Calcul"

#: tutorial.en.rst:332
msgid "Limits"
msgstr "Limites"

#: tutorial.en.rst:334
msgid ""
"Limits are easy to use in SymPy, they follow the syntax ``limit(function, "
"variable, point)``, so to compute the limit of f(x) as x -> 0, you would "
"issue ``limit(f, x, 0)``:"
msgstr ""
"Les limites sont simples à utiliser dans SymPy, elles suivent la syntaxe "
"``limit(function, variable, point)``, donc pour calculer la limite de f(x) "
"pour x tendant vers 0, il suffit d'entrer ``limit(f, x, 0)`` :"

#: tutorial.en.rst:345
msgid "you can also calculate the limit at infinity:"
msgstr "Vous pouvez aussi calculer la limite tendant vers l'infini :"

#: tutorial.en.rst:358
msgid ""
"for some non-trivial examples on limits, you can read the test file "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"
msgstr ""
"Pour des exemples non-triviaux de limites, vous pouvez lire le fichier de "
"test `test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/"
"series/tests/test_demidovich.py>`_"

#: tutorial.en.rst:365
msgid "Differentiation"
msgstr "Dérivation"

#: tutorial.en.rst:367
msgid ""
"You can differentiate any SymPy expression using ``diff(func, var)``. "
"Examples:"
msgstr ""
"Vous pouvez dériver n'importe quelle expression SymPy en utilisant ``diff"
"(func, var)``. Exemples :"

#: tutorial.en.rst:382
msgid "You can check, that it is correct by:"
msgstr "Vous pouvez vérifier que c'est correct avec :"

#: tutorial.en.rst:392
msgid ""
"Higher derivatives can be calculated using the ``diff(func, var, n)`` method:"
msgstr ""
"Des dérivées d'ordre supérieur peuvent être calculées en utilisant la "
"méthode ``diff(func, var, n)`` :"

#: tutorial.en.rst:411
msgid "Series expansion"
msgstr "Développement en série"

#: tutorial.en.rst:413
msgid "Use ``.series(var, point, order)``:"
msgstr "Utilisez ``.series(var, point, order)`` :"

#: tutorial.en.rst:430
msgid "Another simple example:"
msgstr "Un autre exemple simple :"

#: tutorial.en.rst:456
msgid "Summation"
msgstr "Sommes"

#: tutorial.en.rst:458
msgid ""
"Compute the summation of f with respect to the given summation variable over "
"the given limits."
msgstr ""
"Calcule la somme de f indexée sur la variable muette donnée entre les "
"limites données."

#: tutorial.en.rst:460
msgid ""
"summation(f, (i, a, b)) computes the sum of f with respect to i from a to b, "
"i.e.,"
msgstr ""
"summation(f, (i, a, b)) calcule la somme de f sur la variable muette i entre "
"les limites a et b, c'est-à-dire :"

#: tutorial.en.rst:473
msgid ""
"If it cannot compute the sum, it prints the corresponding summation formula. "
"Repeated sums can be computed by introducing additional limits:"
msgstr ""
"Si la somme ne peut pas être résolue, la formule de sommation correspondante "
"est imprimée. Les sommes répétées peuvent être calculées en introduisant des "
"limites additionnelles."

#: tutorial.en.rst:509
msgid "Integration"
msgstr "Intégration"

#: tutorial.en.rst:511
msgid ""
"SymPy has support for indefinite and definite integration of transcendental "
"elementary and special functions via ``integrate()`` facility, which uses "
"powerful extended Risch-Norman algorithm and some heuristics and pattern "
"matching:"
msgstr ""
"SymPy supporte l'intégration définie et indéfinie de fonctions élémentaires "
"et spéciales avec ``integrate()``, qui utilise le puissant algorithme de "
"Risch-Norman étendu et quelques heuristiques ainsi que le filtrage par "
"motif :"

#: tutorial.en.rst:521
msgid "You can integrate elementary functions:"
msgstr "Vous pouvez intégrer des fonctions élémentaires :"

#: tutorial.en.rst:536
msgid "Also special functions are handled easily:"
msgstr "Les fonctions spéciales sont aussi facilement gérées :"

#: tutorial.en.rst:546
msgid "It is possible to compute definite integrals:"
msgstr "Il est possible de calculer l'intégrale définie :"

#: tutorial.en.rst:557
msgid "Also, improper integrals are supported as well:"
msgstr "Les intégrales impropres sont aussi supportées :"

#: tutorial.en.rst:571
msgid "Complex numbers"
msgstr "Nombres complexes"

#: tutorial.en.rst:573
msgid ""
"Besides the imaginary unit, I, which is imaginary, symbols can be created "
"with attributes (e.g. real, positive, complex, etc...) and this will affect "
"how they behave:"
msgstr ""
"Outre l'unité imaginaire, I, qui est imaginaire, les symboles peuvent être "
"créés avec certains attributs (par exemple réel, positif, complexe, etc.) "
"affectant leur comportement :"

#: tutorial.en.rst:592
msgid "Functions"
msgstr "Fonctions"

#: tutorial.en.rst:594
msgid "**trigonometric**"
msgstr "**trigonométrie**"

#: tutorial.en.rst:645
msgid "**spherical harmonics**"
msgstr "**harmoniques sphériques**"

#: tutorial.en.rst:673
msgid "**factorials and gamma function**"
msgstr "**factorielles et fonction gamma**"

#: tutorial.en.rst:693
msgid "**zeta function**"
msgstr "**fonction zeta**"

#: tutorial.en.rst:720
msgid "**polynomials**"
msgstr "**polynômes**"

#: tutorial.en.rst:761
msgid "Differential Equations"
msgstr "Équations différentielles"

#: tutorial.en.rst:763 tutorial.en.rst:785
msgid "In ``isympy``:"
msgstr "Dans ``isympy`` :"

#: tutorial.en.rst:783
msgid "Algebraic equations"
msgstr "Équations algébriques"

#: tutorial.en.rst:800
msgid "Linear Algebra"
msgstr "Algèbre linéaire"

#: tutorial.en.rst:805
msgid "Matrices"
msgstr "Matrices"

#: tutorial.en.rst:807
msgid "Matrices are created as instances from the Matrix class:"
msgstr "Les matrices sont créées en instanciant la classe Matrix :"

#: tutorial.en.rst:817
msgid "They can also contain symbols:"
msgstr "Elles peuvent aussi contenir des symboles :"

#: tutorial.en.rst:834
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""
"Pour plus d'informations et d'exemples avec les Matrices, voyez le Tutoriel "
"Algèbre Linéaire."

#: tutorial.en.rst:839
msgid "Pattern matching"
msgstr "Filtrage par motif"

#: tutorial.en.rst:841
msgid ""
"Use the ``.match()`` method, along with the ``Wild`` class, to perform "
"pattern matching on expressions. The method will return a dictionary with "
"the required substitutions, as follows:"
msgstr ""
"Utilisez la méthode ``.match()``, accompagnée de la classe ``Wild``, pour "
"effectuer un filtrage par motif sur des expressions. La méthode renvoit un "
"dictionnaire avec les substitutions requises, comme suit :"

#: tutorial.en.rst:857
msgid "If the match is unsuccessful, it returns ``None``:"
msgstr "Si le filtrage est infructueux, ``None`` est renvoyé :"

#: tutorial.en.rst:864
msgid ""
"One can also use the exclude parameter of the ``Wild`` class to ensure that "
"certain things do not show up in the result:"
msgstr ""
"On peut aussi utiliser le paramètre ``exclude`` de la classe ``Wild`` pour "
"s'assurer que certaines choses ne figurent pas dans le résultat :"

#: tutorial.en.rst:880
msgid "Printing"
msgstr "Affichage"

#: tutorial.en.rst:882
msgid "There are many ways to print expressions."
msgstr "Les expressions peuvent être affichées de plusieures façons."

#: tutorial.en.rst:884
msgid "**Standard**"
msgstr "**Affichage standard**"

#: tutorial.en.rst:886
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr "C'est ce que ``str(expression)`` renvoit et ça ressemble à ça :"

#: tutorial.en.rst:897
msgid "**Pretty printing**"
msgstr "**Affichage amélioré**"

#: tutorial.en.rst:899
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr ""
"Ceci est un affichage amélioré en art ASCII produit par la fonction "
"``pprint`` :"

#: tutorial.en.rst:918
msgid ""
"If you have a unicode font installed, the ``pprint`` function will use it by "
"default. You can override this using the ``use_unicode`` option.:"
msgstr ""
"Si vous avez une police unicode installée, l'affichage amélioré l'utilisera "
"par défaut. Vous pouvez outrepasser ce comportement en utilisant l'option "
"``use_unicode`` :"

#: tutorial.en.rst:927
msgid ""
"See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""
"Voyez aussi la page wiki `Pretty Printing <https://github.com/sympy/sympy/"
"wiki/Pretty-Printing>`_ pour plus d'exemples concernant l'affichage amélioré "
"et l'option unicode."

#: tutorial.en.rst:931
msgid ""
"Tip: To make pretty printing the default in the Python interpreter, use:"
msgstr ""
"Astuce : pour activer l'affichage amélioré par défaut dans l'interpréteur "
"Python, utilisez :"

#: tutorial.en.rst:956
msgid "**Python printing**"
msgstr "**Python**"

#: tutorial.en.rst:974
msgid "**LaTeX printing**"
msgstr "**LaTeX**"

#: tutorial.en.rst:993
msgid "**MathML**"
msgstr "**MathML**"

#: tutorial.en.rst:1005
msgid "**Pyglet**"
msgstr "**Pyglet**"

#: tutorial.en.rst:1013
msgid ""
"If pyglet is installed, a pyglet window will open containing the LaTeX "
"rendered expression:"
msgstr ""
"Si pyglet est installé, une fenêtre pyglet apparaîtra avec l'expression "
"rendue par LaTeX :"

#: tutorial.en.rst:1019
msgid "Notes"
msgstr "Notes"

#: tutorial.en.rst:1021
msgid ""
"``isympy`` calls ``pprint`` automatically, so that's why you see pretty "
"printing by default."
msgstr ""
"``isympy`` appelle ``pprint`` automatiquement, c'est donc pourquoi vous "
"voyez un affichage amélioré par défaut."

#: tutorial.en.rst:1024
msgid ""
"Note that there is also a printing module available, ``sympy.printing``.  "
"Other printing methods available through this module are:"
msgstr ""
"Notez qu'il y a aussi un module d'affichage disponible, ``sympy.printing``. "
"D'autres méthodes d'affichage disponibles dans ce module sont :"

#: tutorial.en.rst:1027
msgid ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, "
"respectively, a pretty representation of ``expr``. This is the same as the "
"second level of representation described above."
msgstr ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Renvoit ou "
"affiche, respectivement, une représentation améliorée de ``expr``. C'est la "
"même chose que le second niveau de représentation décrit ci-dessus."

#: tutorial.en.rst:1029
msgid ""
"``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a "
"`LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""
"``latex(expr)``, ``print_latex(expr)``: Renvoit ou affiche, respectivement, "
"une représentation `LaTeX <http://www.latex-project.org/>`_ de ``expr``"

#: tutorial.en.rst:1031
msgid ""
"``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a "
"`MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""
"``mathml(expr)``, ``print_mathml(expr)``: Renvoit ou affiche, "
"respectivement, une représentation `MathML <http://www.w3.org/Math/>`_ de "
"``expr``."

#: tutorial.en.rst:1033
msgid ""
"``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview "
"<http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""
"``print_gtk(expr)``: Affiche ``expr`` dans `Gtkmathview <http://helm.cs."
"unibo.it/mml-widget/>`_, un widget GTK qui affiche du code MathML. Le "
"programme `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ est requis."

#: tutorial.en.rst:1036
msgid "Further documentation"
msgstr "Documentation"

#: tutorial.en.rst:1038
msgid ""
"Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's "
"Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""
"Il est maintenant temps d'en apprendre plus sur SymPy. Consultez le `SymPy "
"User's Guide <../guide.html>`_ et la `SymPy Modules Reference <../modules/"
"index.html>`_."

#: tutorial.en.rst:1042
msgid ""
"Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/"
">`_, that contains a lot of useful examples, tutorials, cookbooks that we "
"and our users contributed, and feel free to edit it."
msgstr ""
"Veillez également à consulter notre `wiki.sympy.org <http://wiki.sympy.org/"
">`_ public, qui contient beaucoup d'exemples utiles, des tutoriels, des "
"livres de recettes auxquels nous et nos utilisateurs ont contribué et que "
"nous vous encourageons à modifier."

#: tutorial.en.rst:1049
msgid "Translations"
msgstr "Traductions"

#: tutorial.en.rst:1051
msgid "This tutorial is also available in other languages:"
msgstr "Ce tutoriel est aussi disponible dans les langues suivantes :"
