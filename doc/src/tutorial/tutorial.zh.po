# Chinese translation of the SymPy tutorial.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 15:09\n"
"PO-Revision-Date: 2012-12-10 23:48+0800\n"
"Last-Translator: Huijun Mai <m.maihuijun@gmail.com>\n"
"Language-Team: \n"
"Language: Chinese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial.en.rst:5
msgid "Tutorial"
msgstr "教程"

#: tutorial.en.rst:10
msgid "Introduction"
msgstr "简介"

#: tutorial.en.rst:12
msgid ""
"SymPy is a Python library for symbolic mathematics. It aims to become a full-"
"featured computer algebra system (CAS) while keeping the code as simple as "
"possible in order to be comprehensible and easily extensible.  SymPy is "
"written entirely in Python and does not require any external libraries."
msgstr ""
"SymPy是一个用来处理数学符号的Python库，旨在成为一个多功能但代码尽可能简洁以便"
"于理解和扩展的计算机代数系统(CAS)。同时，SymPy完全是用Python编写的，并且不依"
"赖任何外部的库。"

#: tutorial.en.rst:17
msgid ""
"This tutorial gives an overview and introduction to SymPy. Read this to have "
"an idea what SymPy can do for you (and how) and if you want to know more, "
"read the :ref:`SymPy User's Guide <guide>`, the :ref:`SymPy Modules "
"Reference <module-docs>`, or the `sources <https://github.com/sympy/sympy/"
">`_ directly."
msgstr ""
"本教程主要讲述SymPy的基础知识，阅读它有助于你理解能用SymPy来做什么(怎样做)，"
"如果你想要更深入地学习SymPy，请阅读 `SymPy User's Guide <../guide.html>`_, "
"`SymPy Modules Reference <../modules/index.html>`_, 或者直接阅读 `源代码 "
"<https://github.com/sympy/sympy/>`_ 。"

#: tutorial.en.rst:24
msgid "First Steps with SymPy"
msgstr "开始学习SymPy"

#: tutorial.en.rst:26
msgid ""
"The easiest way to download it is to go to http://code.google.com/p/sympy/ "
"and download the latest tarball from the Featured Downloads:"
msgstr ""
"下载SymPy最简单的方法就是从 http://code.google.com/p/sympy/ 下载最新的压缩"
"包："

#: tutorial.en.rst:32
msgid "Unpack it:"
msgstr "解压："

#: tutorial.en.rst:38
msgid "and try it from a Python interpreter:"
msgstr "然后在Python解释器中尝试使用："

#: tutorial.en.rst:52
msgid ""
"You can use SymPy as shown above and this is indeed the recommended way if "
"you use it in your program. You can also install it using ``./setup.py "
"install`` as any other Python module, or just install a package in your "
"favourite Linux distribution, e.g.:"
msgstr ""
"我们推荐你在你的程序中按上面的方法使用SymPy。你还可以像安装其它Python模块一"
"样，通过 ``./setup.py install`` 安装SymPy，或者就像安装一个软件包一样，在你喜"
"欢的Linux发行版中安装它："

#: tutorial.en.rst:78
msgid ""
"For other means how to install SymPy, consult the wiki page `Download and "
"Installation <https://github.com/sympy/sympy/wiki/Download-Installation>`_."
msgstr ""
"想了解其它安装SymPy的方法，参考wiki页面 `Download and Installation <https://"
"github.com/sympy/sympy/wiki/Download-Installation>`_ 。"

#: tutorial.en.rst:83
msgid "isympy Console"
msgstr "isympy控制台"

#: tutorial.en.rst:85
msgid ""
"For experimenting with new features, or when figuring out how to do things, "
"you can use our special wrapper around IPython called ``isympy`` (located in "
"``bin/isympy`` if you are running from the source directory) which is just a "
"standard Python shell that has already imported the relevant SymPy modules "
"and defined the symbols x, y, z and some other things:"
msgstr ""
"为了验证新特性，或者想弄清楚怎样使用这些特性，你可以使用一个对IPython封装好的"
"包 ``isympy`` (如果从源代码目录中运行，则为 ``bin/isympy`` )，这只是一个已经"
"导入了相关SymPy模块并且定义了符号x，y，z和一些其他东西的标准Python脚本。"

#: tutorial.en.rst:115
msgid ""
"Commands entered by you are bold. Thus what we did in 3 lines in a regular "
"Python interpreter can be done in 1 line in isympy."
msgstr ""
"你所输入的命令是很粗糙的，所以我们在常规的Python解释器中要用三条命令才能完成"
"的事，在isympy中用一条语句就可以完成。"

#: tutorial.en.rst:120
msgid "Using SymPy as a calculator"
msgstr "使用SymPy做计算器"

#: tutorial.en.rst:122
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr "SymPy有三个内置的数值类型：浮点型，分数型和整型"

#: tutorial.en.rst:124
msgid ""
"The Rational class represents a rational number as a pair of two Integers: "
"the numerator and the denominator. So Rational(1, 2) represents 1/2, Rational"
"(5, 2) represents 5/2, and so on."
msgstr ""
"分数类通过一对整型数来表示一个分数：分子和分母，所以Rational(1, 2)表示1/2，"
"Rational(5, 2)表示5/2，等等。"

#: tutorial.en.rst:143
msgid ""
"Proceed with caution while working with Python int's and floating point "
"numbers, especially in division, since you may create a Python number, not a "
"SymPy number. A ratio of two Python ints may create a float -- the \"true "
"division\" standard of Python 3 and the default behavior of ``isympy`` which "
"imports division from __future__:"
msgstr ""
"因为你可能建立的是一个基于Python数值类型的数据，而不是基于SymPy数值类型的，所"
"以请小心使用Python中的整型数和浮点数，特别是在除法运算中。两个Python中的整型"
"数的比值可能会形成一个浮点数——这是Python 3所使用的\"真正的除法\"的标准，也是"
"从__future__中导入除法的 ``isympy`` 的默认操作。"

#: tutorial.en.rst:155
msgid ""
"But in earlier Python versions where division has not been imported, a "
"truncated int will result:"
msgstr ""
"但是在一些早期的Python版本当中，除法还没有被导入，所以会对除法操作的结果取"
"整，截断小数点后面的部分。"

#: tutorial.en.rst:163
msgid ""
"In both cases, however, you are not dealing with a SymPy Number because "
"Python created its own number. Most of the time you will probably be working "
"with Rational numbers, so make sure to use Rational to get the SymPy result. "
"One might find it convenient to equate ``R`` and Rational:"
msgstr ""
"然而，不管在哪种情况下，你都不是在处理一个SymPy的数据，因为是Python创建它自己"
"的数据。在大多数情况下，你可能需要处理分数，所以这时要确保SymPy的输出结果也是"
"分数。当 ``R`` 等同于 ``Rational`` 时，更便于我们编写语句："

#: tutorial.en.rst:177
msgid ""
"We also have some special constants, like e and pi, that are treated as "
"symbols (1 + pi won't evaluate to something numeric, rather it will remain "
"as 1 + pi), and have arbitrary precision:"
msgstr ""
"SymPy中还有一些特殊的常量，例如e和pi，这些常量在SymPy中被看作是符号(1 + pi不会"
"等于一个数值，它只是等于1 + pi)，并且拥有任意精度："

#: tutorial.en.rst:193
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr "正如你所看到的，通过evalf函数对以上表达式求值，可以得到一个浮点数。"

#: tutorial.en.rst:195
msgid "The symbol ``oo`` is used for a class defining mathematical infinity:"
msgstr "符号 ``oo`` 表示数学上所说的无穷："

#: tutorial.en.rst:206
msgid "Symbols"
msgstr "符号"

#: tutorial.en.rst:208
msgid ""
"In contrast to other Computer Algebra Systems, in SymPy you have to declare "
"symbolic variables explicitly:"
msgstr "跟其它计算机代数系统不同，在SymPy中必须明确声明符号变量："

#: tutorial.en.rst:217
msgid ""
"On the left is the normal Python variable which has been assigned to the "
"SymPy Symbol class. Predefined symbols (including those for symbols with "
"Greek names) are available for import from abc:"
msgstr ""
"左边的是常规的Python变量，已经将SymPy符号类分配给这些变量。预定义符号(包括含"
"有希腊字母的符号)可以从abc中导入："

#: tutorial.en.rst:223
msgid ""
"Symbols can also be created with the ``symbols`` or ``var`` functions, the "
"latter automatically adding the created symbols to the namespace, and both "
"accepting a range notation:"
msgstr ""
"符号还可以通过 ``symbols`` 或者 ``var`` 函数来创建，其中，使用 ``var`` 函数会"
"自动添加新建的符号到命名空间，这两个函数都允许使用范围表示作为参数："

#: tutorial.en.rst:235
msgid ""
"Instances of the Symbol class \"play well together\" and are the building "
"blocks of expresions:"
msgstr "符号类的实例能够\"很好地结合\"，由多个符号可以构建一个表达式："

#: tutorial.en.rst:249
msgid ""
"They can be substituted with other numbers, symbols or expressions using "
"``subs(old, new)``:"
msgstr ""
"使用函数 ``subs(old, new)`` 可以将给定的符号代换成其它的数字，符号或者表达"
"式："

#: tutorial.en.rst:262
msgid "For the remainder of the tutorial, we assume that we have run:"
msgstr "对于此教程的余下部分，我们假设已经运行以下语句："

#: tutorial.en.rst:269
msgid ""
"This will make things look better when printed. See the :ref:`printing-"
"tutorial` section below. If you have a unicode font installed, you can pass "
"use_unicode=True for a slightly nicer output."
msgstr ""
"运行这些语句会让输出的结果更雅观，查看以下章节 :ref:`printing-tutorial` ，如"
"果你已经安装了unicode字体，可以设置 use_unicode=True，使得输出更加美观。"

#: tutorial.en.rst:274
msgid "Algebra"
msgstr "代数"

#: tutorial.en.rst:276
msgid "For partial fraction decomposition, use ``apart(expr, x)``:"
msgstr "实现部分分数分解，使用函数 ``apart(expr, x)`` ："

#: tutorial.en.rst:303
msgid "To combine things back together, use ``together(expr, x)``:"
msgstr "将分数组合在一起，使用函数 ``together(expr, x)`` ："

#: tutorial.en.rst:327
msgid "Calculus"
msgstr "微积分"

#: tutorial.en.rst:332
msgid "Limits"
msgstr "极限"

#: tutorial.en.rst:334
msgid ""
"Limits are easy to use in SymPy, they follow the syntax ``limit(function, "
"variable, point)``, so to compute the limit of f(x) as x -> 0, you would "
"issue ``limit(f, x, 0)``:"
msgstr ""
"在SymPy中使用极限很简单，使用函数 ``limit(function, variable, point)`` ，所以"
"为了计算当 x -> 0 时f(x)的极限，只需要输入 ``limit(f, x, 0)`` ："

#: tutorial.en.rst:345
msgid "you can also calculate the limit at infinity:"
msgstr "你还可以计算在无穷远处的极限："

#: tutorial.en.rst:358
msgid ""
"for some non-trivial examples on limits, you can read the test file "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"
msgstr ""
"对于一些关于极限的非平凡的例子，你可以查阅测试文件 `test_demidovich.py "
"<https://github.com/sympy/sympy/blob/master/sympy/series/tests/"
"test_demidovich.py>`_"

#: tutorial.en.rst:365
msgid "Differentiation"
msgstr "求导"

#: tutorial.en.rst:367
msgid ""
"You can differentiate any SymPy expression using ``diff(func, var)``. "
"Examples:"
msgstr ""
"你可以对任何SymPy的表达式进行求导，使用函数 ``diff(func, var)`` ，例如："

#: tutorial.en.rst:382
msgid "You can check, that it is correct by:"
msgstr "你可以检查，但是这是正确的："

#: tutorial.en.rst:392
msgid ""
"Higher derivatives can be calculated using the ``diff(func, var, n)`` method:"
msgstr "计算更高阶的导数，使用函数 ``diff(func, var, n)`` ："

#: tutorial.en.rst:411
msgid "Series expansion"
msgstr "级数展开"

#: tutorial.en.rst:413
msgid "Use ``.series(var, point, order)``:"
msgstr "使用 ``.series(var, point, order)`` ："

#: tutorial.en.rst:430
msgid "Another simple example:"
msgstr "另一个简单的例子："

#: tutorial.en.rst:456
msgid "Summation"
msgstr "求和"

#: tutorial.en.rst:458
msgid ""
"Compute the summation of f with respect to the given summation variable over "
"the given limits."
msgstr "计算求和变量在给定的范围内函数f的和。"

#: tutorial.en.rst:460
msgid ""
"summation(f, (i, a, b)) computes the sum of f with respect to i from a to b, "
"i.e.,"
msgstr "函数summation(f, (i, a, b))计算当i在[a, b]内时f的和是多少，即："

#: tutorial.en.rst:473
msgid ""
"If it cannot compute the sum, it prints the corresponding summation formula. "
"Repeated sums can be computed by introducing additional limits:"
msgstr ""
"如果不能求和，会输出相应的求和公式。通过引入变量的额外限制，可以复合求和："

#: tutorial.en.rst:509
msgid "Integration"
msgstr "积分"

#: tutorial.en.rst:511
msgid ""
"SymPy has support for indefinite and definite integration of transcendental "
"elementary and special functions via ``integrate()`` facility, which uses "
"powerful extended Risch-Norman algorithm and some heuristics and pattern "
"matching:"
msgstr ""
"SymPy支持初等超越函数和特使函数的不定积分和定积分，通过使用函数 ``integrate()"
"`` ，这个函数用到了强大的扩展Risch-Norman算法、一些启发式算法和模式匹配："

#: tutorial.en.rst:521
msgid "You can integrate elementary functions:"
msgstr "求初等函数的积分："

#: tutorial.en.rst:536
msgid "Also special functions are handled easily:"
msgstr "求特殊函数的积分也很容易："

#: tutorial.en.rst:546
msgid "It is possible to compute definite integrals:"
msgstr "计算定积分："

#: tutorial.en.rst:557
msgid "Also, improper integrals are supported as well:"
msgstr "SymPy还支持广义积分："

#: tutorial.en.rst:571
msgid "Complex numbers"
msgstr "复数"

#: tutorial.en.rst:573
msgid ""
"Besides the imaginary unit, I, which is imaginary, symbols can be created "
"with attributes (e.g. real, positive, complex, etc...) and this will affect "
"how they behave:"
msgstr ""
"除了虚数单位I，其它符号的创建都可以带有属性(例如实数、正数、复数等等)，而这些"
"属性会影响操作结果："

#: tutorial.en.rst:592
msgid "Functions"
msgstr "函数"

#: tutorial.en.rst:594
msgid "**trigonometric**"
msgstr "三角函数"

#: tutorial.en.rst:645
msgid "**spherical harmonics**"
msgstr "球谐函数"

#: tutorial.en.rst:673
msgid "**factorials and gamma function**"
msgstr "阶乘和gamma函数"

#: tutorial.en.rst:693
msgid "**zeta function**"
msgstr "zeta函数"

#: tutorial.en.rst:720
msgid "**polynomials**"
msgstr "多项式"

#: tutorial.en.rst:761
msgid "Differential Equations"
msgstr "微分方程"

#: tutorial.en.rst:763 tutorial.en.rst:785
msgid "In ``isympy``:"
msgstr "在 ``isympy`` ："

#: tutorial.en.rst:783
msgid "Algebraic equations"
msgstr "代数方程"

#: tutorial.en.rst:800
msgid "Linear Algebra"
msgstr "线性代数"

#: tutorial.en.rst:805
msgid "Matrices"
msgstr "矩阵"

#: tutorial.en.rst:807
msgid "Matrices are created as instances from the Matrix class:"
msgstr "新建的矩阵是矩阵类的实例："

#: tutorial.en.rst:817
msgid "They can also contain symbols:"
msgstr "矩阵还可以包含符号："

#: tutorial.en.rst:834
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr "想了解更多关于矩阵的内容，请看线性代数教程。"

#: tutorial.en.rst:839
msgid "Pattern matching"
msgstr "模式匹配"

#: tutorial.en.rst:841
msgid ""
"Use the ``.match()`` method, along with the ``Wild`` class, to perform "
"pattern matching on expressions. The method will return a dictionary with "
"the required substitutions, as follows:"
msgstr ""
"使用 ``.match()`` 模式和 ``Wild`` 类，可以对表达式执行模式匹配，返回结果就是"
"所需要的各个匹配值，以字典的形式呈现，就像："

#: tutorial.en.rst:857
msgid "If the match is unsuccessful, it returns ``None``:"
msgstr "如果匹配不成功，则返回 ``None`` ："

#: tutorial.en.rst:864
msgid ""
"One can also use the exclude parameter of the ``Wild`` class to ensure that "
"certain things do not show up in the result:"
msgstr ""
"还可以在 ``Wild`` 类中添加排除参数，使得这些被排除的参数不会出现在结果当中："

#: tutorial.en.rst:880
msgid "Printing"
msgstr "打印"

#: tutorial.en.rst:882
msgid "There are many ways to print expressions."
msgstr "打印表达式有很多方式。"

#: tutorial.en.rst:884
msgid "**Standard**"
msgstr "标准打印"

#: tutorial.en.rst:886
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr "就是 ``str(expression)`` 的返回值，它看起来就像："

#: tutorial.en.rst:897
msgid "**Pretty printing**"
msgstr "Pretty打印"

#: tutorial.en.rst:899
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr "使用 ``pprint`` 函数可以打印出好看的ASCII形式："

#: tutorial.en.rst:918
msgid ""
"If you have a unicode font installed, the ``pprint`` function will use it by "
"default. You can override this using the ``use_unicode`` option.:"
msgstr ""
"如果你安装了unicode字体，那么打印方式会默认使用 ``pprint`` 函数，可以使用 "
"``use_unicode`` 选项来替换这种打印方式："

#: tutorial.en.rst:927
msgid ""
"See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""
"想获得更多unicode打印方式的例子，还可以查看维基百科 `Pretty Printing "
"<https://github.com/sympy/sympy/wiki/Pretty-Printing>`_ 。"

#: tutorial.en.rst:931
msgid ""
"Tip: To make pretty printing the default in the Python interpreter, use:"
msgstr "提示：通过这种方法可以在Python解释器中默认使用pretty打印："

#: tutorial.en.rst:956
msgid "**Python printing**"
msgstr "Python打印"

#: tutorial.en.rst:974
msgid "**LaTeX printing**"
msgstr "LaTeX打印"

#: tutorial.en.rst:993
msgid "**MathML**"
msgstr "MathML"

#: tutorial.en.rst:1005
msgid "**Pyglet**"
msgstr "Pyglet"

#: tutorial.en.rst:1013
msgid ""
"If pyglet is installed, a pyglet window will open containing the LaTeX "
"rendered expression:"
msgstr "如果安装了pyglet，一个呈现LaTeX表达式的窗口会被打开："

#: tutorial.en.rst:1019
msgid "Notes"
msgstr "注释"

#: tutorial.en.rst:1021
msgid ""
"``isympy`` calls ``pprint`` automatically, so that's why you see pretty "
"printing by default."
msgstr ""
"``isympy`` 自动调用 ``pprint`` ，所以在默认情况下你看到的是pretty打印形式的输"
"出。"

#: tutorial.en.rst:1024
msgid ""
"Note that there is also a printing module available, ``sympy.printing``.  "
"Other printing methods available through this module are:"
msgstr ""
"值得注意的是，SymPy还提供一个打印模块 ``sympy.printing`` ，这个模块提供的打印"
"方式有："

#: tutorial.en.rst:1027
msgid ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, "
"respectively, a pretty representation of ``expr``. This is the same as the "
"second level of representation described above."
msgstr ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)`` ：这三个函数都返回"
"或打印 ``expr`` 的pretty表示形式，这跟前面描述的第二种表示方法一样。"

#: tutorial.en.rst:1029
msgid ""
"``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a "
"`LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""
"``latex(expr)``, ``print_latex(expr)`` ：这两个函数都返回或打印 ``expr`` 的 "
"`LaTeX <http://www.latex-project.org/>`_ 表示形式。"

#: tutorial.en.rst:1031
msgid ""
"``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a "
"`MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""
"``mathml(expr)``, ``print_mathml(expr)`` ：这两个函数都返回或打印 ``expr`` "
"的 `MathML <http://www.w3.org/Math/>`_ 表示形式。"

#: tutorial.en.rst:1033
msgid ""
"``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview "
"<http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""
"``print_gtk(expr)`` ：打印 ``expr`` 到 `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_ ，这是一个显示MathML代码的GTK控件，使用这个函数需要 "
"`Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ 程序。"

#: tutorial.en.rst:1036
msgid "Further documentation"
msgstr "更详细的文档"

#: tutorial.en.rst:1038
msgid ""
"Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's "
"Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""
"看完以上的教程之后，现在是时候进一步了解SymPy，请阅读 `SymPy User's Guide "
"<../guide.html>`_ 和 `SymPy Modules Reference <../modules/index.html>`_ 。"

#: tutorial.en.rst:1042
msgid ""
"Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/"
">`_, that contains a lot of useful examples, tutorials, cookbooks that we "
"and our users contributed, and feel free to edit it."
msgstr ""
"还可以浏览我们的公共网页 `wiki.sympy.org <http://wiki.sympy.org/>`_ ，上面有"
"很多有用的例子、教程和cookbooks供大家参考，这些资料都是我们和用户编辑的，欢迎"
"您的参与。"

#: tutorial.en.rst:1049
msgid "Translations"
msgstr "翻译"

#: tutorial.en.rst:1051
msgid "This tutorial is also available in other languages:"
msgstr "此教程还有其它的语言版本："
